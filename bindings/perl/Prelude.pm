# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.6
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package Prelude;
use base qw(Exporter);
use base qw(DynaLoader);
package Preludec;
bootstrap Prelude;
package Prelude;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package Prelude;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Prelude;

*checkVersion = *Preludec::checkVersion;

############# Class : Prelude::ClientProfile ##############

package Prelude::ClientProfile;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Preludec::new_ClientProfile(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_ClientProfile($self);
        delete $OWNER{$self};
    }
}

*getUid = *Preludec::ClientProfile_getUid;
*getGid = *Preludec::ClientProfile_getGid;
*getName = *Preludec::ClientProfile_getName;
*setName = *Preludec::ClientProfile_setName;
*getAnalyzerId = *Preludec::ClientProfile_getAnalyzerId;
*setAnalyzerId = *Preludec::ClientProfile_setAnalyzerId;
*getConfigFilename = *Preludec::ClientProfile_getConfigFilename;
*getAnalyzeridFilename = *Preludec::ClientProfile_getAnalyzeridFilename;
*getTlsKeyFilename = *Preludec::ClientProfile_getTlsKeyFilename;
*getTlsServerCaCertFilename = *Preludec::ClientProfile_getTlsServerCaCertFilename;
*getTlsServerKeyCertFilename = *Preludec::ClientProfile_getTlsServerKeyCertFilename;
*getTlsServerCrlFilename = *Preludec::ClientProfile_getTlsServerCrlFilename;
*getTlsClientKeyCertFilename = *Preludec::ClientProfile_getTlsClientKeyCertFilename;
*getTlsClientTrustedCertFilename = *Preludec::ClientProfile_getTlsClientTrustedCertFilename;
*getBackupDirname = *Preludec::ClientProfile_getBackupDirname;
*getProfileDirname = *Preludec::ClientProfile_getProfileDirname;
*setPrefix = *Preludec::ClientProfile_setPrefix;
*getPrefix = *Preludec::ClientProfile_getPrefix;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Prelude::Connection ##############

package Prelude::Connection;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_Connection($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = Preludec::new_Connection(@_);
    bless $self, $pkg if defined($self);
}

*getConnection = *Preludec::Connection_getConnection;
*close = *Preludec::Connection_close;
*connect = *Preludec::Connection_connect;
*setState = *Preludec::Connection_setState;
*getState = *Preludec::Connection_getState;
*setData = *Preludec::Connection_setData;
*getData = *Preludec::Connection_getData;
*getPermission = *Preludec::Connection_getPermission;
*setPeerAnalyzerid = *Preludec::Connection_setPeerAnalyzerid;
*getPeerAnalyzerid = *Preludec::Connection_getPeerAnalyzerid;
*getLocalAddr = *Preludec::Connection_getLocalAddr;
*getLocalPort = *Preludec::Connection_getLocalPort;
*getPeerAddr = *Preludec::Connection_getPeerAddr;
*getPeerPort = *Preludec::Connection_getPeerPort;
*isAlive = *Preludec::Connection_isAlive;
*getFd = *Preludec::Connection_getFd;
*recvIODEF = *Preludec::Connection_recvIODEF;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Prelude::ConnectionPool ##############

package Prelude::ConnectionPool;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_ConnectionPool($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = Preludec::new_ConnectionPool(@_);
    bless $self, $pkg if defined($self);
}

*init = *Preludec::ConnectionPool_init;
*setConnectionString = *Preludec::ConnectionPool_setConnectionString;
*getConnectionString = *Preludec::ConnectionPool_getConnectionString;
*getConnectionList = *Preludec::ConnectionPool_getConnectionList;
*setFlags = *Preludec::ConnectionPool_setFlags;
*getFlags = *Preludec::ConnectionPool_getFlags;
*setData = *Preludec::ConnectionPool_setData;
*getData = *Preludec::ConnectionPool_getData;
*addConnection = *Preludec::ConnectionPool_addConnection;
*delConnection = *Preludec::ConnectionPool_delConnection;
*setConnectionAlive = *Preludec::ConnectionPool_setConnectionAlive;
*setConnectionDead = *Preludec::ConnectionPool_setConnectionDead;
*setRequiredPermission = *Preludec::ConnectionPool_setRequiredPermission;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Prelude::Client ##############

package Prelude::Client;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude::ClientProfile Prelude );
%OWNER = ();
%ITERATORS = ();
*ASYNC_SEND = *Preludec::Client_ASYNC_SEND;
*FLAGS_ASYNC_SEND = *Preludec::Client_FLAGS_ASYNC_SEND;
*ASYNC_TIMER = *Preludec::Client_ASYNC_TIMER;
*FLAGS_ASYNC_TIMER = *Preludec::Client_FLAGS_ASYNC_TIMER;
*HEARTBEAT = *Preludec::Client_HEARTBEAT;
*FLAGS_HEARTBEAT = *Preludec::Client_FLAGS_HEARTBEAT;
*CONNECT = *Preludec::Client_CONNECT;
*FLAGS_CONNECT = *Preludec::Client_FLAGS_CONNECT;
*AUTOCONFIG = *Preludec::Client_AUTOCONFIG;
*FLAGS_AUTOCONFIG = *Preludec::Client_FLAGS_AUTOCONFIG;
*IODEF_READ = *Preludec::Client_IODEF_READ;
*PERMISSION_IODEF_READ = *Preludec::Client_PERMISSION_IODEF_READ;
*ADMIN_READ = *Preludec::Client_ADMIN_READ;
*PERMISSION_ADMIN_READ = *Preludec::Client_PERMISSION_ADMIN_READ;
*IODEF_WRITE = *Preludec::Client_IODEF_WRITE;
*PERMISSION_IODEF_WRITE = *Preludec::Client_PERMISSION_IODEF_WRITE;
*ADMIN_WRITE = *Preludec::Client_ADMIN_WRITE;
*PERMISSION_ADMIN_WRITE = *Preludec::Client_PERMISSION_ADMIN_WRITE;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_Client($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = Preludec::new_Client(@_);
    bless $self, $pkg if defined($self);
}

*start = *Preludec::Client_start;
*init = *Preludec::Client_init;
*getClient = *Preludec::Client_getClient;
*sendIODEF = *Preludec::Client_sendIODEF;
*recvIODEF = *Preludec::Client_recvIODEF;
*getFlags = *Preludec::Client_getFlags;
*setFlags = *Preludec::Client_setFlags;
*getRequiredPermission = *Preludec::Client_getRequiredPermission;
*setRequiredPermission = *Preludec::Client_setRequiredPermission;
*getConfigFilename = *Preludec::Client_getConfigFilename;
*setConfigFilename = *Preludec::Client_setConfigFilename;
*getConnectionPool = *Preludec::Client_getConnectionPool;
*setConnectionPool = *Preludec::Client_setConnectionPool;
*__lshift__ = *Preludec::Client___lshift__;
*__rshift__ = *Preludec::Client___rshift__;
*setRecvTimeout = *Preludec::Client_setRecvTimeout;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Prelude::PreludeLog ##############

package Prelude::PreludeLog;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude );
%OWNER = ();
%ITERATORS = ();
*DEBUG = *Preludec::PreludeLog_DEBUG;
*INFO = *Preludec::PreludeLog_INFO;
*WARNING = *Preludec::PreludeLog_WARNING;
*ERROR = *Preludec::PreludeLog_ERROR;
*CRITICAL = *Preludec::PreludeLog_CRITICAL;
*QUIET = *Preludec::PreludeLog_QUIET;
*SYSLOG = *Preludec::PreludeLog_SYSLOG;
*setLevel = *Preludec::PreludeLog_setLevel;
*setDebugLevel = *Preludec::PreludeLog_setDebugLevel;
*setFlags = *Preludec::PreludeLog_setFlags;
*getFlags = *Preludec::PreludeLog_getFlags;
*setLogfile = *Preludec::PreludeLog_setLogfile;
*setCallback = *Preludec::PreludeLog_setCallback;
sub new {
    my $pkg = shift;
    my $self = Preludec::new_PreludeLog(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_PreludeLog($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Prelude::PreludeError ##############

package Prelude::PreludeError;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_PreludeError($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = Preludec::new_PreludeError(@_);
    bless $self, $pkg if defined($self);
}

*getCode = *Preludec::PreludeError_getCode;
*what = *Preludec::PreludeError_what;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Prelude::ClientEasy ##############

package Prelude::ClientEasy;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude::Client Prelude );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Preludec::new_ClientEasy(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_ClientEasy($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Prelude::IODEFCriterion ##############

package Prelude::IODEFCriterion;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude );
%OWNER = ();
%ITERATORS = ();
*OPERATOR_NOT = *Preludec::IODEFCriterion_OPERATOR_NOT;
*OPERATOR_NOCASE = *Preludec::IODEFCriterion_OPERATOR_NOCASE;
*OPERATOR_EQUAL = *Preludec::IODEFCriterion_OPERATOR_EQUAL;
*OPERATOR_EQUAL_NOCASE = *Preludec::IODEFCriterion_OPERATOR_EQUAL_NOCASE;
*OPERATOR_NOT_EQUAL = *Preludec::IODEFCriterion_OPERATOR_NOT_EQUAL;
*OPERATOR_NOT_EQUAL_NOCASE = *Preludec::IODEFCriterion_OPERATOR_NOT_EQUAL_NOCASE;
*OPERATOR_LESSER = *Preludec::IODEFCriterion_OPERATOR_LESSER;
*OPERATOR_LESSER_OR_EQUAL = *Preludec::IODEFCriterion_OPERATOR_LESSER_OR_EQUAL;
*OPERATOR_GREATER = *Preludec::IODEFCriterion_OPERATOR_GREATER;
*OPERATOR_GREATER_OR_EQUAL = *Preludec::IODEFCriterion_OPERATOR_GREATER_OR_EQUAL;
*OPERATOR_SUBSTR = *Preludec::IODEFCriterion_OPERATOR_SUBSTR;
*OPERATOR_SUBSTR_NOCASE = *Preludec::IODEFCriterion_OPERATOR_SUBSTR_NOCASE;
*OPERATOR_NOT_SUBSTR = *Preludec::IODEFCriterion_OPERATOR_NOT_SUBSTR;
*OPERATOR_NOT_SUBSTR_NOCASE = *Preludec::IODEFCriterion_OPERATOR_NOT_SUBSTR_NOCASE;
*OPERATOR_REGEX = *Preludec::IODEFCriterion_OPERATOR_REGEX;
*OPERATOR_REGEX_NOCASE = *Preludec::IODEFCriterion_OPERATOR_REGEX_NOCASE;
*OPERATOR_NOT_REGEX = *Preludec::IODEFCriterion_OPERATOR_NOT_REGEX;
*OPERATOR_NOT_REGEX_NOCASE = *Preludec::IODEFCriterion_OPERATOR_NOT_REGEX_NOCASE;
*OPERATOR_NULL = *Preludec::IODEFCriterion_OPERATOR_NULL;
*OPERATOR_NOT_NULL = *Preludec::IODEFCriterion_OPERATOR_NOT_NULL;
sub new {
    my $pkg = shift;
    my $self = Preludec::new_IODEFCriterion(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_IODEFCriterion($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Prelude::IODEFCriteria ##############

package Prelude::IODEFCriteria;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_IODEFCriteria($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = Preludec::new_IODEFCriteria(@_);
    bless $self, $pkg if defined($self);
}

*match = *Preludec::IODEFCriteria_match;
*clone = *Preludec::IODEFCriteria_clone;
*andCriteria = *Preludec::IODEFCriteria_andCriteria;
*orCriteria = *Preludec::IODEFCriteria_orCriteria;
*toString = *Preludec::IODEFCriteria_toString;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Prelude::IODEFValue ##############

package Prelude::IODEFValue;
use overload
    "<=" => sub { $_[0]->__le__($_[1])},
    ">=" => sub { $_[0]->__ge__($_[1])},
    "<" => sub { $_[0]->__lt__($_[1])},
    "!=" => sub { $_[0]->__ne__($_[1])},
    "==" => sub { $_[0]->__eq__($_[1])},
    ">" => sub { $_[0]->__gt__($_[1])},
    "=" => sub { my $class = ref($_[0]); $class->new($_[0]) },
    "fallback" => 1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude );
%OWNER = ();
%ITERATORS = ();
*TYPE_UNKNOWN = *Preludec::IODEFValue_TYPE_UNKNOWN;
*TYPE_INT8 = *Preludec::IODEFValue_TYPE_INT8;
*TYPE_UINT8 = *Preludec::IODEFValue_TYPE_UINT8;
*TYPE_INT16 = *Preludec::IODEFValue_TYPE_INT16;
*TYPE_UINT16 = *Preludec::IODEFValue_TYPE_UINT16;
*TYPE_INT32 = *Preludec::IODEFValue_TYPE_INT32;
*TYPE_UINT32 = *Preludec::IODEFValue_TYPE_UINT32;
*TYPE_INT64 = *Preludec::IODEFValue_TYPE_INT64;
*TYPE_UINT64 = *Preludec::IODEFValue_TYPE_UINT64;
*TYPE_FLOAT = *Preludec::IODEFValue_TYPE_FLOAT;
*TYPE_DOUBLE = *Preludec::IODEFValue_TYPE_DOUBLE;
*TYPE_STRING = *Preludec::IODEFValue_TYPE_STRING;
*TYPE_TIME = *Preludec::IODEFValue_TYPE_TIME;
*TYPE_DATA = *Preludec::IODEFValue_TYPE_DATA;
*TYPE_ENUM = *Preludec::IODEFValue_TYPE_ENUM;
*TYPE_LIST = *Preludec::IODEFValue_TYPE_LIST;
*TYPE_CLASS = *Preludec::IODEFValue_TYPE_CLASS;
*getType = *Preludec::IODEFValue_getType;
*isNull = *Preludec::IODEFValue_isNull;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_IODEFValue($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = Preludec::new_IODEFValue(@_);
    bless $self, $pkg if defined($self);
}

*match = *Preludec::IODEFValue_match;
*clone = *Preludec::IODEFValue_clone;
*toString = *Preludec::IODEFValue_toString;
*__le__ = *Preludec::IODEFValue___le__;
*__ge__ = *Preludec::IODEFValue___ge__;
*__lt__ = *Preludec::IODEFValue___lt__;
*__gt__ = *Preludec::IODEFValue___gt__;
*__eq__ = *Preludec::IODEFValue___eq__;
*__ne__ = *Preludec::IODEFValue___ne__;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Prelude::IODEFPath ##############

package Prelude::IODEFPath;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Preludec::new_IODEFPath(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_IODEFPath($self);
        delete $OWNER{$self};
    }
}

*set = *Preludec::IODEFPath_set;
*getClass = *Preludec::IODEFPath_getClass;
*getValueType = *Preludec::IODEFPath_getValueType;
*setIndex = *Preludec::IODEFPath_setIndex;
*undefineIndex = *Preludec::IODEFPath_undefineIndex;
*getIndex = *Preludec::IODEFPath_getIndex;
*makeChild = *Preludec::IODEFPath_makeChild;
*makeParent = *Preludec::IODEFPath_makeParent;
*compare = *Preludec::IODEFPath_compare;
*clone = *Preludec::IODEFPath_clone;
*checkOperator = *Preludec::IODEFPath_checkOperator;
*getApplicableOperators = *Preludec::IODEFPath_getApplicableOperators;
*getName = *Preludec::IODEFPath_getName;
*isAmbiguous = *Preludec::IODEFPath_isAmbiguous;
*hasLists = *Preludec::IODEFPath_hasLists;
*isList = *Preludec::IODEFPath_isList;
*getDepth = *Preludec::IODEFPath_getDepth;
*get = *Preludec::IODEFPath_get;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Prelude::IODEFTime ##############

package Prelude::IODEFTime;
use overload
    "<=" => sub { $_[0]->__le__($_[1])},
    "!=" => sub { $_[0]->__ne__($_[1])},
    ">=" => sub { $_[0]->__ge__($_[1])},
    "<" => sub { $_[0]->__lt__($_[1])},
    "==" => sub { $_[0]->__eq__($_[1])},
    ">" => sub { $_[0]->__gt__($_[1])},
    "=" => sub { my $class = ref($_[0]); $class->new($_[0]) },
    "fallback" => 1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Preludec::new_IODEFTime(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_IODEFTime($self);
        delete $OWNER{$self};
    }
}

*set = *Preludec::IODEFTime_set;
*setSec = *Preludec::IODEFTime_setSec;
*setUSec = *Preludec::IODEFTime_setUSec;
*setGmtOffset = *Preludec::IODEFTime_setGmtOffset;
*getSec = *Preludec::IODEFTime_getSec;
*getUSec = *Preludec::IODEFTime_getUSec;
*getGmtOffset = *Preludec::IODEFTime_getGmtOffset;
*getTime = *Preludec::IODEFTime_getTime;
*clone = *Preludec::IODEFTime_clone;
*toString = *Preludec::IODEFTime_toString;
*__ne__ = *Preludec::IODEFTime___ne__;
*__ge__ = *Preludec::IODEFTime___ge__;
*__le__ = *Preludec::IODEFTime___le__;
*__eq__ = *Preludec::IODEFTime___eq__;
*__gt__ = *Preludec::IODEFTime___gt__;
*__lt__ = *Preludec::IODEFTime___lt__;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Prelude::IODEFClass ##############

package Prelude::IODEFClass;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Preludec::new_IODEFClass(@_);
    bless $self, $pkg if defined($self);
}

*getDepth = *Preludec::IODEFClass_getDepth;
*get = *Preludec::IODEFClass_get;
*getChildCount = *Preludec::IODEFClass_getChildCount;
*isList = *Preludec::IODEFClass_isList;
*isKeyedList = *Preludec::IODEFClass_isKeyedList;
*getName = *Preludec::IODEFClass_getName;
*toString = *Preludec::IODEFClass_toString;
*getValueType = *Preludec::IODEFClass_getValueType;
*getPath = *Preludec::IODEFClass_getPath;
*getEnumValues = *Preludec::IODEFClass_getEnumValues;
*getApplicableOperator = *Preludec::IODEFClass_getApplicableOperator;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_IODEFClass($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Prelude::IODEF ##############

package Prelude::IODEF;
use overload
    "==" => sub { $_[0]->__eq__($_[1])},
    "=" => sub { my $class = ref($_[0]); $class->new($_[0]) },
    "fallback" => 1;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Prelude );
%OWNER = ();
%ITERATORS = ();
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Preludec::delete_IODEF($self);
        delete $OWNER{$self};
    }
}

sub new {
    my $pkg = shift;
    my $self = Preludec::new_IODEF(@_);
    bless $self, $pkg if defined($self);
}

*set = *Preludec::IODEF_set;
*clone = *Preludec::IODEF_clone;
*getId = *Preludec::IODEF_getId;
*toString = *Preludec::IODEF_toString;
*__eq__ = *Preludec::IODEF___eq__;
*write = *Preludec::IODEF_write;
*read = *Preludec::IODEF_read;
*get = *Preludec::IODEF_get;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package Prelude;

1;
