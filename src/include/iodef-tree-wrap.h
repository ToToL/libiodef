
/*****
*
* Copyright (C) 2001-2016 CS-SI. All Rights Reserved.
* Author: Yoann Vandoorselaere <yoann.v@libiodef-ids.com>
* Author: Nicolas Delon <nicolas.delon@libiodef-ids.com>
*
* This file is part of the LibIodef library.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2, or (at your option)
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with this program; if not, write to the Free Software Foundation, Inc.,
* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*
*****/

/* Auto-generated by the GenerateIODEFTreeWrapH package */

#ifndef _LIBIODEF_IODEF_TREE_WRAP_H
#define _LIBIODEF_IODEF_TREE_WRAP_H

#include <limits.h>
#include "iodef-class.h"
#include "iodef-value.h"
#include "libiodef-inttypes.h"
#include "libiodef-string.h"

#ifdef __cplusplus
  extern "C" {
#endif

#ifdef WIN32
# undef interface
#endif

#define IODEF_LIST_APPEND  INT_MAX
#define IODEF_LIST_PREPEND (INT_MAX - 1)

typedef enum {
        IODEF_ADDITIONAL_DATA_RESTRICTION_ERROR = -1,
} iodef_additional_data_restriction_t;


iodef_additional_data_restriction_t iodef_additional_data_restriction_to_numeric(const char *name);
const char *iodef_additional_data_restriction_to_string(iodef_additional_data_restriction_t val);


typedef enum {
        IODEF_ADDITIONAL_DATA_TYPE_ERROR = -1,
        IODEF_ADDITIONAL_DATA_TYPE_STRING = 1,
        IODEF_ADDITIONAL_DATA_TYPE_BYTE = 2,
        IODEF_ADDITIONAL_DATA_TYPE_CHARACTER = 3,
        IODEF_ADDITIONAL_DATA_TYPE_DATE_TIME = 4,
        IODEF_ADDITIONAL_DATA_TYPE_INTEGER = 5,
        IODEF_ADDITIONAL_DATA_TYPE_NTPSTAMP = 6,
        IODEF_ADDITIONAL_DATA_TYPE_PORTLIST = 7,
        IODEF_ADDITIONAL_DATA_TYPE_REAL = 8,
        IODEF_ADDITIONAL_DATA_TYPE_BOOLEAN = 9,
        IODEF_ADDITIONAL_DATA_TYPE_BYTE_STRING = 10,
        IODEF_ADDITIONAL_DATA_TYPE_XML = 11,
} iodef_additional_data_type_t;


iodef_additional_data_type_t iodef_additional_data_type_to_numeric(const char *name);
const char *iodef_additional_data_type_to_string(iodef_additional_data_type_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 *         IGNORED(libiodef_bool_t, _type_is_set);
 * 
 *         iodef_additional_data_restriction_t restriction;
 *         iodef_additional_data_type_t type;
 *         libiodef_string_t *formatid;
 *         libiodef_string_t *meaning;
 *         libiodef_string_t *ext_dtype;
 *         REQUIRED(iodef_data_t, *data);
 * } TYPE_ID(iodef_additional_data_t, 1);
 */


typedef struct iodef_additional_data iodef_additional_data_t;

int iodef_additional_data_new(iodef_additional_data_t **ret);
int iodef_additional_data_copy(const iodef_additional_data_t *src, iodef_additional_data_t *dst);
int iodef_additional_data_clone(iodef_additional_data_t *src, iodef_additional_data_t **dst);
int iodef_additional_data_compare(const iodef_additional_data_t *obj1, const iodef_additional_data_t *obj2);
iodef_additional_data_t *iodef_additional_data_ref(iodef_additional_data_t *additional_data);

#ifndef SWIG
int _iodef_additional_data_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_additional_data_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_additional_data_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_additional_data_destroy(iodef_additional_data_t *ptr);
iodef_additional_data_restriction_t iodef_additional_data_get_restriction(iodef_additional_data_t *ptr);
void iodef_additional_data_set_restriction(iodef_additional_data_t *ptr, iodef_additional_data_restriction_t restriction);
int iodef_additional_data_new_restriction(iodef_additional_data_t *ptr, iodef_additional_data_restriction_t **ret);

iodef_additional_data_type_t iodef_additional_data_get_type(iodef_additional_data_t *ptr);
void iodef_additional_data_set_type(iodef_additional_data_t *ptr, iodef_additional_data_type_t type);
int iodef_additional_data_new_type(iodef_additional_data_t *ptr, iodef_additional_data_type_t **ret);

libiodef_string_t *iodef_additional_data_get_formatid(iodef_additional_data_t *ptr);
void iodef_additional_data_set_formatid(iodef_additional_data_t *ptr, libiodef_string_t *formatid);
int iodef_additional_data_new_formatid(iodef_additional_data_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_additional_data_get_meaning(iodef_additional_data_t *ptr);
void iodef_additional_data_set_meaning(iodef_additional_data_t *ptr, libiodef_string_t *meaning);
int iodef_additional_data_new_meaning(iodef_additional_data_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_additional_data_get_ext_dtype(iodef_additional_data_t *ptr);
void iodef_additional_data_set_ext_dtype(iodef_additional_data_t *ptr, libiodef_string_t *ext_dtype);
int iodef_additional_data_new_ext_dtype(iodef_additional_data_t *ptr, libiodef_string_t **ret);

iodef_data_t *iodef_additional_data_get_data(iodef_additional_data_t *ptr);
void iodef_additional_data_set_data(iodef_additional_data_t *ptr, iodef_data_t *data);
int iodef_additional_data_new_data(iodef_additional_data_t *ptr, iodef_data_t **ret);

typedef enum {
        IODEF_EMAIL_MEANING_ERROR = -1,
} iodef_email_meaning_t;


iodef_email_meaning_t iodef_email_meaning_to_numeric(const char *name);
const char *iodef_email_meaning_to_string(iodef_email_meaning_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_email_meaning_t meaning;
 *         REQUIRED(libiodef_string_t, *email);
 * } TYPE_ID(iodef_email_t, 2);
 */


typedef struct iodef_email iodef_email_t;

int iodef_email_new(iodef_email_t **ret);
int iodef_email_copy(const iodef_email_t *src, iodef_email_t *dst);
int iodef_email_clone(iodef_email_t *src, iodef_email_t **dst);
int iodef_email_compare(const iodef_email_t *obj1, const iodef_email_t *obj2);
iodef_email_t *iodef_email_ref(iodef_email_t *email);

#ifndef SWIG
int _iodef_email_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_email_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_email_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_email_destroy(iodef_email_t *ptr);
iodef_email_meaning_t iodef_email_get_meaning(iodef_email_t *ptr);
void iodef_email_set_meaning(iodef_email_t *ptr, iodef_email_meaning_t meaning);
int iodef_email_new_meaning(iodef_email_t *ptr, iodef_email_meaning_t **ret);

libiodef_string_t *iodef_email_get_email(iodef_email_t *ptr);
void iodef_email_set_email(iodef_email_t *ptr, libiodef_string_t *email);
int iodef_email_new_email(iodef_email_t *ptr, libiodef_string_t **ret);

typedef enum {
        IODEF_REGISTRY_HANDLE_REGISTRY_ERROR = -1,
        IODEF_REGISTRY_HANDLE_REGISTRY_INTERNIC = 1,
        IODEF_REGISTRY_HANDLE_REGISTRY_APNIC = 2,
        IODEF_REGISTRY_HANDLE_REGISTRY_ARIN = 3,
        IODEF_REGISTRY_HANDLE_REGISTRY_LACNIC = 4,
        IODEF_REGISTRY_HANDLE_REGISTRY_RIPE = 5,
        IODEF_REGISTRY_HANDLE_REGISTRY_AFRINIC = 6,
        IODEF_REGISTRY_HANDLE_REGISTRY_LOCAL = 7,
        IODEF_REGISTRY_HANDLE_REGISTRY_EXT_VALUE = 8,
} iodef_registry_handle_registry_t;


iodef_registry_handle_registry_t iodef_registry_handle_registry_to_numeric(const char *name);
const char *iodef_registry_handle_registry_to_string(iodef_registry_handle_registry_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_registry_handle_registry_t registry;
 *         libiodef_string_t *ext_registry;
 * } TYPE_ID(iodef_registry_handle_t, 3);
 */


typedef struct iodef_registry_handle iodef_registry_handle_t;

int iodef_registry_handle_new(iodef_registry_handle_t **ret);
int iodef_registry_handle_copy(const iodef_registry_handle_t *src, iodef_registry_handle_t *dst);
int iodef_registry_handle_clone(iodef_registry_handle_t *src, iodef_registry_handle_t **dst);
int iodef_registry_handle_compare(const iodef_registry_handle_t *obj1, const iodef_registry_handle_t *obj2);
iodef_registry_handle_t *iodef_registry_handle_ref(iodef_registry_handle_t *registry_handle);

#ifndef SWIG
int _iodef_registry_handle_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_registry_handle_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_registry_handle_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_registry_handle_destroy(iodef_registry_handle_t *ptr);
iodef_registry_handle_registry_t iodef_registry_handle_get_registry(iodef_registry_handle_t *ptr);
void iodef_registry_handle_set_registry(iodef_registry_handle_t *ptr, iodef_registry_handle_registry_t registry);
int iodef_registry_handle_new_registry(iodef_registry_handle_t *ptr, iodef_registry_handle_registry_t **ret);

libiodef_string_t *iodef_registry_handle_get_ext_registry(iodef_registry_handle_t *ptr);
void iodef_registry_handle_set_ext_registry(iodef_registry_handle_t *ptr, libiodef_string_t *ext_registry);
int iodef_registry_handle_new_ext_registry(iodef_registry_handle_t *ptr, libiodef_string_t **ret);

typedef enum {
        IODEF_POSTAL_ADDRESS_LANG_ERROR = -1,
} iodef_postal_address_lang_t;


iodef_postal_address_lang_t iodef_postal_address_lang_to_numeric(const char *name);
const char *iodef_postal_address_lang_to_string(iodef_postal_address_lang_t val);


typedef enum {
        IODEF_POSTAL_ADDRESS_MEANING_ERROR = -1,
} iodef_postal_address_meaning_t;


iodef_postal_address_meaning_t iodef_postal_address_meaning_to_numeric(const char *name);
const char *iodef_postal_address_meaning_to_string(iodef_postal_address_meaning_t val);




/*
 * struct {
 *         IODEF_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_postal_address_lang_t lang;
 *         iodef_postal_address_meaning_t meaning;
 * } TYPE_ID(iodef_postal_address_t, 4);
 */


typedef struct iodef_postal_address iodef_postal_address_t;

int iodef_postal_address_new(iodef_postal_address_t **ret);
int iodef_postal_address_copy(const iodef_postal_address_t *src, iodef_postal_address_t *dst);
int iodef_postal_address_clone(iodef_postal_address_t *src, iodef_postal_address_t **dst);
int iodef_postal_address_compare(const iodef_postal_address_t *obj1, const iodef_postal_address_t *obj2);
iodef_postal_address_t *iodef_postal_address_ref(iodef_postal_address_t *postal_address);

#ifndef SWIG
int _iodef_postal_address_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_postal_address_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_postal_address_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_postal_address_destroy(iodef_postal_address_t *ptr);
iodef_postal_address_lang_t iodef_postal_address_get_lang(iodef_postal_address_t *ptr);
void iodef_postal_address_set_lang(iodef_postal_address_t *ptr, iodef_postal_address_lang_t lang);
int iodef_postal_address_new_lang(iodef_postal_address_t *ptr, iodef_postal_address_lang_t **ret);

iodef_postal_address_meaning_t iodef_postal_address_get_meaning(iodef_postal_address_t *ptr);
void iodef_postal_address_set_meaning(iodef_postal_address_t *ptr, iodef_postal_address_meaning_t meaning);
int iodef_postal_address_new_meaning(iodef_postal_address_t *ptr, iodef_postal_address_meaning_t **ret);

typedef enum {
        IODEF_CONTACT_TYPE_ERROR = -1,
        IODEF_CONTACT_TYPE_PERSON = 1,
        IODEF_CONTACT_TYPE_ORGANIZATION = 2,
        IODEF_CONTACT_TYPE_EXT_VALUE = 3,
} iodef_contact_type_t;


iodef_contact_type_t iodef_contact_type_to_numeric(const char *name);
const char *iodef_contact_type_to_string(iodef_contact_type_t val);


typedef enum {
        IODEF_CONTACT_ROLE_ERROR = -1,
        IODEF_CONTACT_ROLE_CREATOR = 1,
        IODEF_CONTACT_ROLE_ADMIN = 2,
        IODEF_CONTACT_ROLE_TECH = 3,
        IODEF_CONTACT_ROLE_IRT = 4,
        IODEF_CONTACT_ROLE_CC = 5,
        IODEF_CONTACT_ROLE_EXT_VALUE = 6,
} iodef_contact_role_t;


iodef_contact_role_t iodef_contact_role_to_numeric(const char *name);
const char *iodef_contact_role_to_string(iodef_contact_role_t val);


typedef enum {
        IODEF_CONTACT_RESTRICTION_ERROR = -1,
} iodef_contact_restriction_t;


iodef_contact_restriction_t iodef_contact_restriction_to_numeric(const char *name);
const char *iodef_contact_restriction_to_string(iodef_contact_restriction_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         LISTED_OBJECT(additional_data_list, iodef_additional_data_t);
 *         libiodef_string_t *fax;
 *         LISTED_OBJECT(description_list, libiodef_string_t);
 *         LISTED_OBJECT(telephone_list, libiodef_string_t);
 *         LISTED_OBJECT(registry_handle_list, iodef_registry_handle_t);
 *         LISTED_OBJECT(contact_list, iodef_contact_t);
 *         libiodef_string_t *contact_name;
 *         libiodef_string_t *timezone;
 *         iodef_postal_address_t *postal_address;
 *         LISTED_OBJECT(email_list, iodef_email_t);
 *         iodef_contact_type_t type;
 *         iodef_contact_role_t role;
 *         libiodef_string_t *ext_type;
 *         libiodef_string_t *ext_role;
 *         iodef_contact_restriction_t restriction;
 * } TYPE_ID(iodef_contact_t, 5);
 */


typedef struct iodef_contact iodef_contact_t;

int iodef_contact_new(iodef_contact_t **ret);
int iodef_contact_copy(const iodef_contact_t *src, iodef_contact_t *dst);
int iodef_contact_clone(iodef_contact_t *src, iodef_contact_t **dst);
int iodef_contact_compare(const iodef_contact_t *obj1, const iodef_contact_t *obj2);
iodef_contact_t *iodef_contact_ref(iodef_contact_t *contact);

#ifndef SWIG
int _iodef_contact_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_contact_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_contact_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_contact_destroy(iodef_contact_t *ptr);
iodef_additional_data_t *iodef_contact_get_next_additional_data(iodef_contact_t *contact, iodef_additional_data_t *additional_data_cur);
void iodef_contact_set_additional_data(iodef_contact_t *ptr, iodef_additional_data_t *object, int pos);
int iodef_contact_new_additional_data(iodef_contact_t *ptr, iodef_additional_data_t **ret, int pos);

libiodef_string_t *iodef_contact_get_fax(iodef_contact_t *ptr);
void iodef_contact_set_fax(iodef_contact_t *ptr, libiodef_string_t *fax);
int iodef_contact_new_fax(iodef_contact_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_contact_get_next_description(iodef_contact_t *contact, libiodef_string_t *libiodef_string_cur);
void iodef_contact_set_description(iodef_contact_t *ptr, libiodef_string_t *object, int pos);
int iodef_contact_new_description(iodef_contact_t *ptr, libiodef_string_t **ret, int pos);

libiodef_string_t *iodef_contact_get_next_telephone(iodef_contact_t *contact, libiodef_string_t *libiodef_string_cur);
void iodef_contact_set_telephone(iodef_contact_t *ptr, libiodef_string_t *object, int pos);
int iodef_contact_new_telephone(iodef_contact_t *ptr, libiodef_string_t **ret, int pos);

iodef_registry_handle_t *iodef_contact_get_next_registry_handle(iodef_contact_t *contact, iodef_registry_handle_t *registry_handle_cur);
void iodef_contact_set_registry_handle(iodef_contact_t *ptr, iodef_registry_handle_t *object, int pos);
int iodef_contact_new_registry_handle(iodef_contact_t *ptr, iodef_registry_handle_t **ret, int pos);

iodef_contact_t *iodef_contact_get_next_contact(iodef_contact_t *contact, iodef_contact_t *contact_cur);
void iodef_contact_set_contact(iodef_contact_t *ptr, iodef_contact_t *object, int pos);
int iodef_contact_new_contact(iodef_contact_t *ptr, iodef_contact_t **ret, int pos);

libiodef_string_t *iodef_contact_get_contact_name(iodef_contact_t *ptr);
void iodef_contact_set_contact_name(iodef_contact_t *ptr, libiodef_string_t *contact_name);
int iodef_contact_new_contact_name(iodef_contact_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_contact_get_timezone(iodef_contact_t *ptr);
void iodef_contact_set_timezone(iodef_contact_t *ptr, libiodef_string_t *timezone);
int iodef_contact_new_timezone(iodef_contact_t *ptr, libiodef_string_t **ret);

iodef_postal_address_t *iodef_contact_get_postal_address(iodef_contact_t *ptr);
void iodef_contact_set_postal_address(iodef_contact_t *ptr, iodef_postal_address_t *postal_address);
int iodef_contact_new_postal_address(iodef_contact_t *ptr, iodef_postal_address_t **ret);

iodef_email_t *iodef_contact_get_next_email(iodef_contact_t *contact, iodef_email_t *email_cur);
void iodef_contact_set_email(iodef_contact_t *ptr, iodef_email_t *object, int pos);
int iodef_contact_new_email(iodef_contact_t *ptr, iodef_email_t **ret, int pos);

iodef_contact_type_t iodef_contact_get_type(iodef_contact_t *ptr);
void iodef_contact_set_type(iodef_contact_t *ptr, iodef_contact_type_t type);
int iodef_contact_new_type(iodef_contact_t *ptr, iodef_contact_type_t **ret);

iodef_contact_role_t iodef_contact_get_role(iodef_contact_t *ptr);
void iodef_contact_set_role(iodef_contact_t *ptr, iodef_contact_role_t role);
int iodef_contact_new_role(iodef_contact_t *ptr, iodef_contact_role_t **ret);

libiodef_string_t *iodef_contact_get_ext_type(iodef_contact_t *ptr);
void iodef_contact_set_ext_type(iodef_contact_t *ptr, libiodef_string_t *ext_type);
int iodef_contact_new_ext_type(iodef_contact_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_contact_get_ext_role(iodef_contact_t *ptr);
void iodef_contact_set_ext_role(iodef_contact_t *ptr, libiodef_string_t *ext_role);
int iodef_contact_new_ext_role(iodef_contact_t *ptr, libiodef_string_t **ret);

iodef_contact_restriction_t iodef_contact_get_restriction(iodef_contact_t *ptr);
void iodef_contact_set_restriction(iodef_contact_t *ptr, iodef_contact_restriction_t restriction);
int iodef_contact_new_restriction(iodef_contact_t *ptr, iodef_contact_restriction_t **ret);

typedef enum {
        IODEF_INCIDENT_ID_RESTRICTION_ERROR = -1,
} iodef_incident_id_restriction_t;


iodef_incident_id_restriction_t iodef_incident_id_restriction_to_numeric(const char *name);
const char *iodef_incident_id_restriction_to_string(iodef_incident_id_restriction_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         libiodef_string_t *instance;
 *         REQUIRED(libiodef_string_t, *name);
 *         iodef_incident_id_restriction_t restriction;
 * } TYPE_ID(iodef_incident_id_t, 6);
 */


typedef struct iodef_incident_id iodef_incident_id_t;

int iodef_incident_id_new(iodef_incident_id_t **ret);
int iodef_incident_id_copy(const iodef_incident_id_t *src, iodef_incident_id_t *dst);
int iodef_incident_id_clone(iodef_incident_id_t *src, iodef_incident_id_t **dst);
int iodef_incident_id_compare(const iodef_incident_id_t *obj1, const iodef_incident_id_t *obj2);
iodef_incident_id_t *iodef_incident_id_ref(iodef_incident_id_t *incident_id);

#ifndef SWIG
int _iodef_incident_id_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_incident_id_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_incident_id_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_incident_id_destroy(iodef_incident_id_t *ptr);
libiodef_string_t *iodef_incident_id_get_instance(iodef_incident_id_t *ptr);
void iodef_incident_id_set_instance(iodef_incident_id_t *ptr, libiodef_string_t *instance);
int iodef_incident_id_new_instance(iodef_incident_id_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_incident_id_get_name(iodef_incident_id_t *ptr);
void iodef_incident_id_set_name(iodef_incident_id_t *ptr, libiodef_string_t *name);
int iodef_incident_id_new_name(iodef_incident_id_t *ptr, libiodef_string_t **ret);

iodef_incident_id_restriction_t iodef_incident_id_get_restriction(iodef_incident_id_t *ptr);
void iodef_incident_id_set_restriction(iodef_incident_id_t *ptr, iodef_incident_id_restriction_t restriction);
int iodef_incident_id_new_restriction(iodef_incident_id_t *ptr, iodef_incident_id_restriction_t **ret);

typedef enum {
        IODEF_ALTERNATIVE_ID_RESTRICTION_ERROR = -1,
} iodef_alternative_id_restriction_t;


iodef_alternative_id_restriction_t iodef_alternative_id_restriction_to_numeric(const char *name);
const char *iodef_alternative_id_restriction_to_string(iodef_alternative_id_restriction_t val);




/*
 * struct {
 *         IODEF_OBJECT;
 *         REFCOUNT;
 * 
 *         LISTED_OBJECT(incident_id_list, iodef_incident_id_t);
 *         iodef_alternative_id_restriction_t restriction;
 * } TYPE_ID(iodef_alternative_id_t, 7);
 */


typedef struct iodef_alternative_id iodef_alternative_id_t;

int iodef_alternative_id_new(iodef_alternative_id_t **ret);
int iodef_alternative_id_copy(const iodef_alternative_id_t *src, iodef_alternative_id_t *dst);
int iodef_alternative_id_clone(iodef_alternative_id_t *src, iodef_alternative_id_t **dst);
int iodef_alternative_id_compare(const iodef_alternative_id_t *obj1, const iodef_alternative_id_t *obj2);
iodef_alternative_id_t *iodef_alternative_id_ref(iodef_alternative_id_t *alternative_id);

#ifndef SWIG
int _iodef_alternative_id_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_alternative_id_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_alternative_id_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_alternative_id_destroy(iodef_alternative_id_t *ptr);
iodef_incident_id_t *iodef_alternative_id_get_next_incident_id(iodef_alternative_id_t *alternative_id, iodef_incident_id_t *incident_id_cur);
void iodef_alternative_id_set_incident_id(iodef_alternative_id_t *ptr, iodef_incident_id_t *object, int pos);
int iodef_alternative_id_new_incident_id(iodef_alternative_id_t *ptr, iodef_incident_id_t **ret, int pos);

iodef_alternative_id_restriction_t iodef_alternative_id_get_restriction(iodef_alternative_id_t *ptr);
void iodef_alternative_id_set_restriction(iodef_alternative_id_t *ptr, iodef_alternative_id_restriction_t restriction);
int iodef_alternative_id_new_restriction(iodef_alternative_id_t *ptr, iodef_alternative_id_restriction_t **ret);

typedef enum {
        IODEF_RELATED_ACTIVITY_RESTRICTION_ERROR = -1,
} iodef_related_activity_restriction_t;


iodef_related_activity_restriction_t iodef_related_activity_restriction_to_numeric(const char *name);
const char *iodef_related_activity_restriction_to_string(iodef_related_activity_restriction_t val);




/*
 * struct {
 *         IODEF_OBJECT;
 *         REFCOUNT;
 * 
 *         LISTED_OBJECT(url_list, libiodef_string_t);
 *         LISTED_OBJECT(incident_id_list, iodef_incident_id_t);
 *         iodef_related_activity_restriction_t restriction;
 * } TYPE_ID(iodef_related_activity_t, 8);
 */


typedef struct iodef_related_activity iodef_related_activity_t;

int iodef_related_activity_new(iodef_related_activity_t **ret);
int iodef_related_activity_copy(const iodef_related_activity_t *src, iodef_related_activity_t *dst);
int iodef_related_activity_clone(iodef_related_activity_t *src, iodef_related_activity_t **dst);
int iodef_related_activity_compare(const iodef_related_activity_t *obj1, const iodef_related_activity_t *obj2);
iodef_related_activity_t *iodef_related_activity_ref(iodef_related_activity_t *related_activity);

#ifndef SWIG
int _iodef_related_activity_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_related_activity_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_related_activity_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_related_activity_destroy(iodef_related_activity_t *ptr);
libiodef_string_t *iodef_related_activity_get_next_url(iodef_related_activity_t *related_activity, libiodef_string_t *libiodef_string_cur);
void iodef_related_activity_set_url(iodef_related_activity_t *ptr, libiodef_string_t *object, int pos);
int iodef_related_activity_new_url(iodef_related_activity_t *ptr, libiodef_string_t **ret, int pos);

iodef_incident_id_t *iodef_related_activity_get_next_incident_id(iodef_related_activity_t *related_activity, iodef_incident_id_t *incident_id_cur);
void iodef_related_activity_set_incident_id(iodef_related_activity_t *ptr, iodef_incident_id_t *object, int pos);
int iodef_related_activity_new_incident_id(iodef_related_activity_t *ptr, iodef_incident_id_t **ret, int pos);

iodef_related_activity_restriction_t iodef_related_activity_get_restriction(iodef_related_activity_t *ptr);
void iodef_related_activity_set_restriction(iodef_related_activity_t *ptr, iodef_related_activity_restriction_t restriction);
int iodef_related_activity_new_restriction(iodef_related_activity_t *ptr, iodef_related_activity_restriction_t **ret);

typedef enum {
        IODEF_HISTORY_ITEM_ACTION_ERROR = -1,
} iodef_history_item_action_t;


iodef_history_item_action_t iodef_history_item_action_to_numeric(const char *name);
const char *iodef_history_item_action_to_string(iodef_history_item_action_t val);


typedef enum {
        IODEF_HISTORY_ITEM_RESTRICTION_ERROR = -1,
} iodef_history_item_restriction_t;


iodef_history_item_restriction_t iodef_history_item_restriction_to_numeric(const char *name);
const char *iodef_history_item_restriction_to_string(iodef_history_item_restriction_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         LISTED_OBJECT(additional_data_list, iodef_additional_data_t);
 *         iodef_incident_id_t *incident_id;
 *         LISTED_OBJECT(description_list, libiodef_string_t);
 *         iodef_contact_t *contact;
 *         REQUIRED(iodef_time_t, *date_time);
 *         iodef_history_item_action_t action;
 *         iodef_history_item_restriction_t restriction;
 *         libiodef_string_t *ext_action;
 * } TYPE_ID(iodef_history_item_t, 9);
 */


typedef struct iodef_history_item iodef_history_item_t;

int iodef_history_item_new(iodef_history_item_t **ret);
int iodef_history_item_copy(const iodef_history_item_t *src, iodef_history_item_t *dst);
int iodef_history_item_clone(iodef_history_item_t *src, iodef_history_item_t **dst);
int iodef_history_item_compare(const iodef_history_item_t *obj1, const iodef_history_item_t *obj2);
iodef_history_item_t *iodef_history_item_ref(iodef_history_item_t *history_item);

#ifndef SWIG
int _iodef_history_item_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_history_item_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_history_item_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_history_item_destroy(iodef_history_item_t *ptr);
iodef_additional_data_t *iodef_history_item_get_next_additional_data(iodef_history_item_t *history_item, iodef_additional_data_t *additional_data_cur);
void iodef_history_item_set_additional_data(iodef_history_item_t *ptr, iodef_additional_data_t *object, int pos);
int iodef_history_item_new_additional_data(iodef_history_item_t *ptr, iodef_additional_data_t **ret, int pos);

iodef_incident_id_t *iodef_history_item_get_incident_id(iodef_history_item_t *ptr);
void iodef_history_item_set_incident_id(iodef_history_item_t *ptr, iodef_incident_id_t *incident_id);
int iodef_history_item_new_incident_id(iodef_history_item_t *ptr, iodef_incident_id_t **ret);

libiodef_string_t *iodef_history_item_get_next_description(iodef_history_item_t *history_item, libiodef_string_t *libiodef_string_cur);
void iodef_history_item_set_description(iodef_history_item_t *ptr, libiodef_string_t *object, int pos);
int iodef_history_item_new_description(iodef_history_item_t *ptr, libiodef_string_t **ret, int pos);

iodef_contact_t *iodef_history_item_get_contact(iodef_history_item_t *ptr);
void iodef_history_item_set_contact(iodef_history_item_t *ptr, iodef_contact_t *contact);
int iodef_history_item_new_contact(iodef_history_item_t *ptr, iodef_contact_t **ret);

iodef_time_t *iodef_history_item_get_date_time(iodef_history_item_t *ptr);
void iodef_history_item_set_date_time(iodef_history_item_t *ptr, iodef_time_t *date_time);
int iodef_history_item_new_date_time(iodef_history_item_t *ptr, iodef_time_t **ret);

iodef_history_item_action_t iodef_history_item_get_action(iodef_history_item_t *ptr);
void iodef_history_item_set_action(iodef_history_item_t *ptr, iodef_history_item_action_t action);
int iodef_history_item_new_action(iodef_history_item_t *ptr, iodef_history_item_action_t **ret);

iodef_history_item_restriction_t iodef_history_item_get_restriction(iodef_history_item_t *ptr);
void iodef_history_item_set_restriction(iodef_history_item_t *ptr, iodef_history_item_restriction_t restriction);
int iodef_history_item_new_restriction(iodef_history_item_t *ptr, iodef_history_item_restriction_t **ret);

libiodef_string_t *iodef_history_item_get_ext_action(iodef_history_item_t *ptr);
void iodef_history_item_set_ext_action(iodef_history_item_t *ptr, libiodef_string_t *ext_action);
int iodef_history_item_new_ext_action(iodef_history_item_t *ptr, libiodef_string_t **ret);

typedef enum {
        IODEF_HISTORY_RESTRICTION_ERROR = -1,
} iodef_history_restriction_t;


iodef_history_restriction_t iodef_history_restriction_to_numeric(const char *name);
const char *iodef_history_restriction_to_string(iodef_history_restriction_t val);




/*
 * struct {
 *         IODEF_OBJECT;
 *         REFCOUNT;
 * 
 *         LISTED_OBJECT(history_item_list, iodef_history_item_t);
 *         iodef_history_restriction_t restriction;
 * } TYPE_ID(iodef_history_t, 10);
 */


typedef struct iodef_history iodef_history_t;

int iodef_history_new(iodef_history_t **ret);
int iodef_history_copy(const iodef_history_t *src, iodef_history_t *dst);
int iodef_history_clone(iodef_history_t *src, iodef_history_t **dst);
int iodef_history_compare(const iodef_history_t *obj1, const iodef_history_t *obj2);
iodef_history_t *iodef_history_ref(iodef_history_t *history);

#ifndef SWIG
int _iodef_history_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_history_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_history_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_history_destroy(iodef_history_t *ptr);
iodef_history_item_t *iodef_history_get_next_history_item(iodef_history_t *history, iodef_history_item_t *history_item_cur);
void iodef_history_set_history_item(iodef_history_t *ptr, iodef_history_item_t *object, int pos);
int iodef_history_new_history_item(iodef_history_t *ptr, iodef_history_item_t **ret, int pos);

iodef_history_restriction_t iodef_history_get_restriction(iodef_history_t *ptr);
void iodef_history_set_restriction(iodef_history_t *ptr, iodef_history_restriction_t restriction);
int iodef_history_new_restriction(iodef_history_t *ptr, iodef_history_restriction_t **ret);

typedef enum {
        IODEF_EXPECTATION_ACTION_ERROR = -1,
        IODEF_EXPECTATION_ACTION_NOTHING = 1,
        IODEF_EXPECTATION_ACTION_CONTACT_SOURCE_SITE = 2,
        IODEF_EXPECTATION_ACTION_CONTACT_TARGET_SITE = 3,
        IODEF_EXPECTATION_ACTION_CONTACT_SENDER = 4,
        IODEF_EXPECTATION_ACTION_INVESTIGATE = 5,
        IODEF_EXPECTATION_ACTION_BLOCK_HOST = 6,
        IODEF_EXPECTATION_ACTION_BLOCK_NETWORK = 7,
        IODEF_EXPECTATION_ACTION_BLOCK_PORT = 8,
        IODEF_EXPECTATION_ACTION_RATE_LIMIT_HOST = 9,
        IODEF_EXPECTATION_ACTION_RATE_LIMIT_NETWORK = 10,
        IODEF_EXPECTATION_ACTION_RATE_LIMIT_PORT = 11,
        IODEF_EXPECTATION_ACTION_REMEDIATE_OTHER = 12,
        IODEF_EXPECTATION_ACTION_STATUS_TRIAGE = 13,
        IODEF_EXPECTATION_ACTION_STATUS_NEW_INFO = 14,
        IODEF_EXPECTATION_ACTION_OTHER = 15,
        IODEF_EXPECTATION_ACTION_EXT_VALUE = 16,
} iodef_expectation_action_t;


iodef_expectation_action_t iodef_expectation_action_to_numeric(const char *name);
const char *iodef_expectation_action_to_string(iodef_expectation_action_t val);


typedef enum {
        IODEF_EXPECTATION_RESTRICTION_ERROR = -1,
} iodef_expectation_restriction_t;


iodef_expectation_restriction_t iodef_expectation_restriction_to_numeric(const char *name);
const char *iodef_expectation_restriction_to_string(iodef_expectation_restriction_t val);


typedef enum {
        IODEF_EXPECTATION_SEVERITY_ERROR = -1,
        IODEF_EXPECTATION_SEVERITY_LOW = 1,
        IODEF_EXPECTATION_SEVERITY_MEDIUM = 2,
        IODEF_EXPECTATION_SEVERITY_HIGH = 3,
} iodef_expectation_severity_t;


iodef_expectation_severity_t iodef_expectation_severity_to_numeric(const char *name);
const char *iodef_expectation_severity_to_string(iodef_expectation_severity_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_time_t *end_time;
 *         LISTED_OBJECT(description_list, libiodef_string_t);
 *         iodef_time_t *start_time;
 *         iodef_contact_t *contact;
 *         iodef_expectation_action_t action;
 *         iodef_expectation_restriction_t restriction;
 *         libiodef_string_t *ext_action;
 *         iodef_expectation_severity_t severity;
 * } TYPE_ID(iodef_expectation_t, 11);
 */


typedef struct iodef_expectation iodef_expectation_t;

int iodef_expectation_new(iodef_expectation_t **ret);
int iodef_expectation_copy(const iodef_expectation_t *src, iodef_expectation_t *dst);
int iodef_expectation_clone(iodef_expectation_t *src, iodef_expectation_t **dst);
int iodef_expectation_compare(const iodef_expectation_t *obj1, const iodef_expectation_t *obj2);
iodef_expectation_t *iodef_expectation_ref(iodef_expectation_t *expectation);

#ifndef SWIG
int _iodef_expectation_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_expectation_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_expectation_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_expectation_destroy(iodef_expectation_t *ptr);
iodef_time_t *iodef_expectation_get_end_time(iodef_expectation_t *ptr);
void iodef_expectation_set_end_time(iodef_expectation_t *ptr, iodef_time_t *end_time);
int iodef_expectation_new_end_time(iodef_expectation_t *ptr, iodef_time_t **ret);

libiodef_string_t *iodef_expectation_get_next_description(iodef_expectation_t *expectation, libiodef_string_t *libiodef_string_cur);
void iodef_expectation_set_description(iodef_expectation_t *ptr, libiodef_string_t *object, int pos);
int iodef_expectation_new_description(iodef_expectation_t *ptr, libiodef_string_t **ret, int pos);

iodef_time_t *iodef_expectation_get_start_time(iodef_expectation_t *ptr);
void iodef_expectation_set_start_time(iodef_expectation_t *ptr, iodef_time_t *start_time);
int iodef_expectation_new_start_time(iodef_expectation_t *ptr, iodef_time_t **ret);

iodef_contact_t *iodef_expectation_get_contact(iodef_expectation_t *ptr);
void iodef_expectation_set_contact(iodef_expectation_t *ptr, iodef_contact_t *contact);
int iodef_expectation_new_contact(iodef_expectation_t *ptr, iodef_contact_t **ret);

iodef_expectation_action_t iodef_expectation_get_action(iodef_expectation_t *ptr);
void iodef_expectation_set_action(iodef_expectation_t *ptr, iodef_expectation_action_t action);
int iodef_expectation_new_action(iodef_expectation_t *ptr, iodef_expectation_action_t **ret);

iodef_expectation_restriction_t iodef_expectation_get_restriction(iodef_expectation_t *ptr);
void iodef_expectation_set_restriction(iodef_expectation_t *ptr, iodef_expectation_restriction_t restriction);
int iodef_expectation_new_restriction(iodef_expectation_t *ptr, iodef_expectation_restriction_t **ret);

libiodef_string_t *iodef_expectation_get_ext_action(iodef_expectation_t *ptr);
void iodef_expectation_set_ext_action(iodef_expectation_t *ptr, libiodef_string_t *ext_action);
int iodef_expectation_new_ext_action(iodef_expectation_t *ptr, libiodef_string_t **ret);

iodef_expectation_severity_t iodef_expectation_get_severity(iodef_expectation_t *ptr);
void iodef_expectation_set_severity(iodef_expectation_t *ptr, iodef_expectation_severity_t severity);
int iodef_expectation_new_severity(iodef_expectation_t *ptr, iodef_expectation_severity_t **ret);

typedef enum {
        IODEF_RECORD_PATTERN_OFFSETUNIT_ERROR = -1,
        IODEF_RECORD_PATTERN_OFFSETUNIT_LINE = 1,
        IODEF_RECORD_PATTERN_OFFSETUNIT_BINARY = 2,
        IODEF_RECORD_PATTERN_OFFSETUNIT_EXT_VALUE = 3,
} iodef_record_pattern_offsetunit_t;


iodef_record_pattern_offsetunit_t iodef_record_pattern_offsetunit_to_numeric(const char *name);
const char *iodef_record_pattern_offsetunit_to_string(iodef_record_pattern_offsetunit_t val);


typedef enum {
        IODEF_RECORD_PATTERN_TYPE_ERROR = -1,
        IODEF_RECORD_PATTERN_TYPE_REGEX = 1,
        IODEF_RECORD_PATTERN_TYPE_BINARY = 2,
        IODEF_RECORD_PATTERN_TYPE_XPATH = 3,
        IODEF_RECORD_PATTERN_TYPE_EXT_VALUE = 4,
} iodef_record_pattern_type_t;


iodef_record_pattern_type_t iodef_record_pattern_type_to_numeric(const char *name);
const char *iodef_record_pattern_type_to_string(iodef_record_pattern_type_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_record_pattern_offsetunit_t offsetunit;
 *         OPTIONAL_INT(uint32_t, instance);
 *         libiodef_string_t *ext_type;
 *         OPTIONAL_INT(uint32_t, offset);
 *         libiodef_string_t *ext_offsetunit;
 *         iodef_record_pattern_type_t type;
 * } TYPE_ID(iodef_record_pattern_t, 12);
 */


typedef struct iodef_record_pattern iodef_record_pattern_t;

int iodef_record_pattern_new(iodef_record_pattern_t **ret);
int iodef_record_pattern_copy(const iodef_record_pattern_t *src, iodef_record_pattern_t *dst);
int iodef_record_pattern_clone(iodef_record_pattern_t *src, iodef_record_pattern_t **dst);
int iodef_record_pattern_compare(const iodef_record_pattern_t *obj1, const iodef_record_pattern_t *obj2);
iodef_record_pattern_t *iodef_record_pattern_ref(iodef_record_pattern_t *record_pattern);

#ifndef SWIG
int _iodef_record_pattern_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_record_pattern_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_record_pattern_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_record_pattern_destroy(iodef_record_pattern_t *ptr);
iodef_record_pattern_offsetunit_t iodef_record_pattern_get_offsetunit(iodef_record_pattern_t *ptr);
void iodef_record_pattern_set_offsetunit(iodef_record_pattern_t *ptr, iodef_record_pattern_offsetunit_t offsetunit);
int iodef_record_pattern_new_offsetunit(iodef_record_pattern_t *ptr, iodef_record_pattern_offsetunit_t **ret);

void iodef_record_pattern_unset_instance(iodef_record_pattern_t *ptr);
uint32_t *iodef_record_pattern_get_instance(iodef_record_pattern_t *ptr);
void iodef_record_pattern_set_instance(iodef_record_pattern_t *ptr, uint32_t instance);
int iodef_record_pattern_new_instance(iodef_record_pattern_t *ptr, uint32_t **ret);

libiodef_string_t *iodef_record_pattern_get_ext_type(iodef_record_pattern_t *ptr);
void iodef_record_pattern_set_ext_type(iodef_record_pattern_t *ptr, libiodef_string_t *ext_type);
int iodef_record_pattern_new_ext_type(iodef_record_pattern_t *ptr, libiodef_string_t **ret);

void iodef_record_pattern_unset_offset(iodef_record_pattern_t *ptr);
uint32_t *iodef_record_pattern_get_offset(iodef_record_pattern_t *ptr);
void iodef_record_pattern_set_offset(iodef_record_pattern_t *ptr, uint32_t offset);
int iodef_record_pattern_new_offset(iodef_record_pattern_t *ptr, uint32_t **ret);

libiodef_string_t *iodef_record_pattern_get_ext_offsetunit(iodef_record_pattern_t *ptr);
void iodef_record_pattern_set_ext_offsetunit(iodef_record_pattern_t *ptr, libiodef_string_t *ext_offsetunit);
int iodef_record_pattern_new_ext_offsetunit(iodef_record_pattern_t *ptr, libiodef_string_t **ret);

iodef_record_pattern_type_t iodef_record_pattern_get_type(iodef_record_pattern_t *ptr);
void iodef_record_pattern_set_type(iodef_record_pattern_t *ptr, iodef_record_pattern_type_t type);
int iodef_record_pattern_new_type(iodef_record_pattern_t *ptr, iodef_record_pattern_type_t **ret);

typedef enum {
        IODEF_RECORD_ITEM_RESTRICTION_ERROR = -1,
} iodef_record_item_restriction_t;


iodef_record_item_restriction_t iodef_record_item_restriction_to_numeric(const char *name);
const char *iodef_record_item_restriction_to_string(iodef_record_item_restriction_t val);


typedef enum {
        IODEF_RECORD_ITEM_DTYPE_ERROR = -1,
        IODEF_RECORD_ITEM_DTYPE_BOOLEAN = 1,
        IODEF_RECORD_ITEM_DTYPE_BYTE = 2,
        IODEF_RECORD_ITEM_DTYPE_CHARACTER = 3,
        IODEF_RECORD_ITEM_DTYPE_DATE_TIME = 4,
        IODEF_RECORD_ITEM_DTYPE_INTEGER = 5,
        IODEF_RECORD_ITEM_DTYPE_PORTLIST = 6,
        IODEF_RECORD_ITEM_DTYPE_REAL = 7,
        IODEF_RECORD_ITEM_DTYPE_STRING = 8,
        IODEF_RECORD_ITEM_DTYPE_FILE = 9,
        IODEF_RECORD_ITEM_DTYPE_FRAME = 10,
        IODEF_RECORD_ITEM_DTYPE_PACKET = 11,
        IODEF_RECORD_ITEM_DTYPE_IPV4_PACKET = 12,
        IODEF_RECORD_ITEM_DTYPE_IPV6_PACKET = 13,
        IODEF_RECORD_ITEM_DTYPE_PATH = 14,
        IODEF_RECORD_ITEM_DTYPE_URL = 15,
        IODEF_RECORD_ITEM_DTYPE_CSV = 16,
        IODEF_RECORD_ITEM_DTYPE_WINREG = 17,
        IODEF_RECORD_ITEM_DTYPE_XML = 18,
        IODEF_RECORD_ITEM_DTYPE_EXT_VALUE = 19,
} iodef_record_item_dtype_t;


iodef_record_item_dtype_t iodef_record_item_dtype_to_numeric(const char *name);
const char *iodef_record_item_dtype_to_string(iodef_record_item_dtype_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_record_item_restriction_t restriction;
 *         iodef_record_item_dtype_t dtype;
 *         libiodef_string_t *formatid;
 *         libiodef_string_t *meaning;
 *         libiodef_string_t *ext_dtype;
 *         iodef_data_t *data;
 * } TYPE_ID(iodef_record_item_t, 13);
 */


typedef struct iodef_record_item iodef_record_item_t;

int iodef_record_item_new(iodef_record_item_t **ret);
int iodef_record_item_copy(const iodef_record_item_t *src, iodef_record_item_t *dst);
int iodef_record_item_clone(iodef_record_item_t *src, iodef_record_item_t **dst);
int iodef_record_item_compare(const iodef_record_item_t *obj1, const iodef_record_item_t *obj2);
iodef_record_item_t *iodef_record_item_ref(iodef_record_item_t *record_item);

#ifndef SWIG
int _iodef_record_item_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_record_item_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_record_item_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_record_item_destroy(iodef_record_item_t *ptr);
iodef_record_item_restriction_t iodef_record_item_get_restriction(iodef_record_item_t *ptr);
void iodef_record_item_set_restriction(iodef_record_item_t *ptr, iodef_record_item_restriction_t restriction);
int iodef_record_item_new_restriction(iodef_record_item_t *ptr, iodef_record_item_restriction_t **ret);

iodef_record_item_dtype_t iodef_record_item_get_dtype(iodef_record_item_t *ptr);
void iodef_record_item_set_dtype(iodef_record_item_t *ptr, iodef_record_item_dtype_t dtype);
int iodef_record_item_new_dtype(iodef_record_item_t *ptr, iodef_record_item_dtype_t **ret);

libiodef_string_t *iodef_record_item_get_formatid(iodef_record_item_t *ptr);
void iodef_record_item_set_formatid(iodef_record_item_t *ptr, libiodef_string_t *formatid);
int iodef_record_item_new_formatid(iodef_record_item_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_record_item_get_meaning(iodef_record_item_t *ptr);
void iodef_record_item_set_meaning(iodef_record_item_t *ptr, libiodef_string_t *meaning);
int iodef_record_item_new_meaning(iodef_record_item_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_record_item_get_ext_dtype(iodef_record_item_t *ptr);
void iodef_record_item_set_ext_dtype(iodef_record_item_t *ptr, libiodef_string_t *ext_dtype);
int iodef_record_item_new_ext_dtype(iodef_record_item_t *ptr, libiodef_string_t **ret);

iodef_data_t *iodef_record_item_get_data(iodef_record_item_t *ptr);
void iodef_record_item_set_data(iodef_record_item_t *ptr, iodef_data_t *data);
int iodef_record_item_new_data(iodef_record_item_t *ptr, iodef_data_t **ret);



/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         libiodef_string_t *url;
 *         libiodef_string_t *vendor;
 *         libiodef_string_t *name;
 *         libiodef_string_t *family;
 *         libiodef_string_t *swid;
 *         libiodef_string_t *patch;
 *         libiodef_string_t *version;
 *         libiodef_string_t *configid;
 * } TYPE_ID(iodef_application_t, 14);
 */


typedef struct iodef_application iodef_application_t;

int iodef_application_new(iodef_application_t **ret);
int iodef_application_copy(const iodef_application_t *src, iodef_application_t *dst);
int iodef_application_clone(iodef_application_t *src, iodef_application_t **dst);
int iodef_application_compare(const iodef_application_t *obj1, const iodef_application_t *obj2);
iodef_application_t *iodef_application_ref(iodef_application_t *application);

#ifndef SWIG
int _iodef_application_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_application_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_application_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_application_destroy(iodef_application_t *ptr);
libiodef_string_t *iodef_application_get_url(iodef_application_t *ptr);
void iodef_application_set_url(iodef_application_t *ptr, libiodef_string_t *url);
int iodef_application_new_url(iodef_application_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_application_get_vendor(iodef_application_t *ptr);
void iodef_application_set_vendor(iodef_application_t *ptr, libiodef_string_t *vendor);
int iodef_application_new_vendor(iodef_application_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_application_get_name(iodef_application_t *ptr);
void iodef_application_set_name(iodef_application_t *ptr, libiodef_string_t *name);
int iodef_application_new_name(iodef_application_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_application_get_family(iodef_application_t *ptr);
void iodef_application_set_family(iodef_application_t *ptr, libiodef_string_t *family);
int iodef_application_new_family(iodef_application_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_application_get_swid(iodef_application_t *ptr);
void iodef_application_set_swid(iodef_application_t *ptr, libiodef_string_t *swid);
int iodef_application_new_swid(iodef_application_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_application_get_patch(iodef_application_t *ptr);
void iodef_application_set_patch(iodef_application_t *ptr, libiodef_string_t *patch);
int iodef_application_new_patch(iodef_application_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_application_get_version(iodef_application_t *ptr);
void iodef_application_set_version(iodef_application_t *ptr, libiodef_string_t *version);
int iodef_application_new_version(iodef_application_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_application_get_configid(iodef_application_t *ptr);
void iodef_application_set_configid(iodef_application_t *ptr, libiodef_string_t *configid);
int iodef_application_new_configid(iodef_application_t *ptr, libiodef_string_t **ret);

typedef enum {
        IODEF_RECORD_DATA_RESTRICTION_ERROR = -1,
} iodef_record_data_restriction_t;


iodef_record_data_restriction_t iodef_record_data_restriction_to_numeric(const char *name);
const char *iodef_record_data_restriction_to_string(iodef_record_data_restriction_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_additional_data_t *additional_data;
 *         LISTED_OBJECT(description_list, libiodef_string_t);
 *         LISTED_OBJECT(record_pattern_list, iodef_record_pattern_t);
 *         iodef_time_t *date_time;
 *         iodef_application_t *application;
 *         LISTED_OBJECT(record_item_list, iodef_record_item_t);
 *         iodef_record_data_restriction_t restriction;
 * } TYPE_ID(iodef_record_data_t, 15);
 */


typedef struct iodef_record_data iodef_record_data_t;

int iodef_record_data_new(iodef_record_data_t **ret);
int iodef_record_data_copy(const iodef_record_data_t *src, iodef_record_data_t *dst);
int iodef_record_data_clone(iodef_record_data_t *src, iodef_record_data_t **dst);
int iodef_record_data_compare(const iodef_record_data_t *obj1, const iodef_record_data_t *obj2);
iodef_record_data_t *iodef_record_data_ref(iodef_record_data_t *record_data);

#ifndef SWIG
int _iodef_record_data_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_record_data_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_record_data_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_record_data_destroy(iodef_record_data_t *ptr);
iodef_additional_data_t *iodef_record_data_get_additional_data(iodef_record_data_t *ptr);
void iodef_record_data_set_additional_data(iodef_record_data_t *ptr, iodef_additional_data_t *additional_data);
int iodef_record_data_new_additional_data(iodef_record_data_t *ptr, iodef_additional_data_t **ret);

libiodef_string_t *iodef_record_data_get_next_description(iodef_record_data_t *record_data, libiodef_string_t *libiodef_string_cur);
void iodef_record_data_set_description(iodef_record_data_t *ptr, libiodef_string_t *object, int pos);
int iodef_record_data_new_description(iodef_record_data_t *ptr, libiodef_string_t **ret, int pos);

iodef_record_pattern_t *iodef_record_data_get_next_record_pattern(iodef_record_data_t *record_data, iodef_record_pattern_t *record_pattern_cur);
void iodef_record_data_set_record_pattern(iodef_record_data_t *ptr, iodef_record_pattern_t *object, int pos);
int iodef_record_data_new_record_pattern(iodef_record_data_t *ptr, iodef_record_pattern_t **ret, int pos);

iodef_time_t *iodef_record_data_get_date_time(iodef_record_data_t *ptr);
void iodef_record_data_set_date_time(iodef_record_data_t *ptr, iodef_time_t *date_time);
int iodef_record_data_new_date_time(iodef_record_data_t *ptr, iodef_time_t **ret);

iodef_application_t *iodef_record_data_get_application(iodef_record_data_t *ptr);
void iodef_record_data_set_application(iodef_record_data_t *ptr, iodef_application_t *application);
int iodef_record_data_new_application(iodef_record_data_t *ptr, iodef_application_t **ret);

iodef_record_item_t *iodef_record_data_get_next_record_item(iodef_record_data_t *record_data, iodef_record_item_t *record_item_cur);
void iodef_record_data_set_record_item(iodef_record_data_t *ptr, iodef_record_item_t *object, int pos);
int iodef_record_data_new_record_item(iodef_record_data_t *ptr, iodef_record_item_t **ret, int pos);

iodef_record_data_restriction_t iodef_record_data_get_restriction(iodef_record_data_t *ptr);
void iodef_record_data_set_restriction(iodef_record_data_t *ptr, iodef_record_data_restriction_t restriction);
int iodef_record_data_new_restriction(iodef_record_data_t *ptr, iodef_record_data_restriction_t **ret);

typedef enum {
        IODEF_RECORD_RESTRICTION_ERROR = -1,
} iodef_record_restriction_t;


iodef_record_restriction_t iodef_record_restriction_to_numeric(const char *name);
const char *iodef_record_restriction_to_string(iodef_record_restriction_t val);




/*
 * struct {
 *         IODEF_OBJECT;
 *         REFCOUNT;
 * 
 *         LISTED_OBJECT(record_data_list, iodef_record_data_t);
 *         iodef_record_restriction_t restriction;
 * } TYPE_ID(iodef_record_t, 16);
 */


typedef struct iodef_record iodef_record_t;

int iodef_record_new(iodef_record_t **ret);
int iodef_record_copy(const iodef_record_t *src, iodef_record_t *dst);
int iodef_record_clone(iodef_record_t *src, iodef_record_t **dst);
int iodef_record_compare(const iodef_record_t *obj1, const iodef_record_t *obj2);
iodef_record_t *iodef_record_ref(iodef_record_t *record);

#ifndef SWIG
int _iodef_record_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_record_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_record_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_record_destroy(iodef_record_t *ptr);
iodef_record_data_t *iodef_record_get_next_record_data(iodef_record_t *record, iodef_record_data_t *record_data_cur);
void iodef_record_set_record_data(iodef_record_t *ptr, iodef_record_data_t *object, int pos);
int iodef_record_new_record_data(iodef_record_t *ptr, iodef_record_data_t **ret, int pos);

iodef_record_restriction_t iodef_record_get_restriction(iodef_record_t *ptr);
void iodef_record_set_restriction(iodef_record_t *ptr, iodef_record_restriction_t restriction);
int iodef_record_new_restriction(iodef_record_t *ptr, iodef_record_restriction_t **ret);



/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         LISTED_OBJECT(url_list, libiodef_string_t);
 *         LISTED_OBJECT(description_list, libiodef_string_t);
 *         REQUIRED(libiodef_string_t, *reference_name);
 * } TYPE_ID(iodef_reference_t, 17);
 */


typedef struct iodef_reference iodef_reference_t;

int iodef_reference_new(iodef_reference_t **ret);
int iodef_reference_copy(const iodef_reference_t *src, iodef_reference_t *dst);
int iodef_reference_clone(iodef_reference_t *src, iodef_reference_t **dst);
int iodef_reference_compare(const iodef_reference_t *obj1, const iodef_reference_t *obj2);
iodef_reference_t *iodef_reference_ref(iodef_reference_t *reference);

#ifndef SWIG
int _iodef_reference_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_reference_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_reference_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_reference_destroy(iodef_reference_t *ptr);
libiodef_string_t *iodef_reference_get_next_url(iodef_reference_t *reference, libiodef_string_t *libiodef_string_cur);
void iodef_reference_set_url(iodef_reference_t *ptr, libiodef_string_t *object, int pos);
int iodef_reference_new_url(iodef_reference_t *ptr, libiodef_string_t **ret, int pos);

libiodef_string_t *iodef_reference_get_next_description(iodef_reference_t *reference, libiodef_string_t *libiodef_string_cur);
void iodef_reference_set_description(iodef_reference_t *ptr, libiodef_string_t *object, int pos);
int iodef_reference_new_description(iodef_reference_t *ptr, libiodef_string_t **ret, int pos);

libiodef_string_t *iodef_reference_get_reference_name(iodef_reference_t *ptr);
void iodef_reference_set_reference_name(iodef_reference_t *ptr, libiodef_string_t *reference_name);
int iodef_reference_new_reference_name(iodef_reference_t *ptr, libiodef_string_t **ret);

typedef enum {
        IODEF_METHOD_RESTRICTION_ERROR = -1,
} iodef_method_restriction_t;


iodef_method_restriction_t iodef_method_restriction_to_numeric(const char *name);
const char *iodef_method_restriction_to_string(iodef_method_restriction_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         LISTED_OBJECT(additional_data_list, iodef_additional_data_t);
 *         LISTED_OBJECT(description_list, libiodef_string_t);
 *         LISTED_OBJECT(reference_list, iodef_reference_t);
 *         iodef_method_restriction_t restriction;
 * } TYPE_ID(iodef_method_t, 18);
 */


typedef struct iodef_method iodef_method_t;

int iodef_method_new(iodef_method_t **ret);
int iodef_method_copy(const iodef_method_t *src, iodef_method_t *dst);
int iodef_method_clone(iodef_method_t *src, iodef_method_t **dst);
int iodef_method_compare(const iodef_method_t *obj1, const iodef_method_t *obj2);
iodef_method_t *iodef_method_ref(iodef_method_t *method);

#ifndef SWIG
int _iodef_method_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_method_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_method_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_method_destroy(iodef_method_t *ptr);
iodef_additional_data_t *iodef_method_get_next_additional_data(iodef_method_t *method, iodef_additional_data_t *additional_data_cur);
void iodef_method_set_additional_data(iodef_method_t *ptr, iodef_additional_data_t *object, int pos);
int iodef_method_new_additional_data(iodef_method_t *ptr, iodef_additional_data_t **ret, int pos);

libiodef_string_t *iodef_method_get_next_description(iodef_method_t *method, libiodef_string_t *libiodef_string_cur);
void iodef_method_set_description(iodef_method_t *ptr, libiodef_string_t *object, int pos);
int iodef_method_new_description(iodef_method_t *ptr, libiodef_string_t **ret, int pos);

iodef_reference_t *iodef_method_get_next_reference(iodef_method_t *method, iodef_reference_t *reference_cur);
void iodef_method_set_reference(iodef_method_t *ptr, iodef_reference_t *object, int pos);
int iodef_method_new_reference(iodef_method_t *ptr, iodef_reference_t **ret, int pos);

iodef_method_restriction_t iodef_method_get_restriction(iodef_method_t *ptr);
void iodef_method_set_restriction(iodef_method_t *ptr, iodef_method_restriction_t restriction);
int iodef_method_new_restriction(iodef_method_t *ptr, iodef_method_restriction_t **ret);

typedef enum {
        IODEF_TIME_IMPACT_DURATION_ERROR = -1,
        IODEF_TIME_IMPACT_DURATION_SECOND = 1,
        IODEF_TIME_IMPACT_DURATION_MINUTE = 2,
        IODEF_TIME_IMPACT_DURATION_HOUR = 3,
        IODEF_TIME_IMPACT_DURATION_DAY = 4,
        IODEF_TIME_IMPACT_DURATION_MONTH = 5,
        IODEF_TIME_IMPACT_DURATION_QUARTER = 6,
        IODEF_TIME_IMPACT_DURATION_YEAR = 7,
        IODEF_TIME_IMPACT_DURATION_EXT_VALUE = 8,
} iodef_time_impact_duration_t;


iodef_time_impact_duration_t iodef_time_impact_duration_to_numeric(const char *name);
const char *iodef_time_impact_duration_to_string(iodef_time_impact_duration_t val);


typedef enum {
        IODEF_TIME_IMPACT_METRIC_ERROR = -1,
        IODEF_TIME_IMPACT_METRIC_LABOR = 1,
        IODEF_TIME_IMPACT_METRIC_ELAPSED = 2,
        IODEF_TIME_IMPACT_METRIC_DOWNTIME = 3,
        IODEF_TIME_IMPACT_METRIC_EXT_VALUE = 4,
} iodef_time_impact_metric_t;


iodef_time_impact_metric_t iodef_time_impact_metric_to_numeric(const char *name);
const char *iodef_time_impact_metric_to_string(iodef_time_impact_metric_t val);


typedef enum {
        IODEF_TIME_IMPACT_SEVERITY_ERROR = -1,
        IODEF_TIME_IMPACT_SEVERITY_LOW = 1,
        IODEF_TIME_IMPACT_SEVERITY_MEDIUM = 2,
        IODEF_TIME_IMPACT_SEVERITY_HIGH = 3,
} iodef_time_impact_severity_t;


iodef_time_impact_severity_t iodef_time_impact_severity_to_numeric(const char *name);
const char *iodef_time_impact_severity_to_string(iodef_time_impact_severity_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         libiodef_string_t *ext_metric;
 *         iodef_time_impact_duration_t duration;
 *         iodef_time_impact_metric_t metric;
 *         iodef_time_impact_severity_t severity;
 *         libiodef_string_t *ext_duration;
 * } TYPE_ID(iodef_time_impact_t, 19);
 */


typedef struct iodef_time_impact iodef_time_impact_t;

int iodef_time_impact_new(iodef_time_impact_t **ret);
int iodef_time_impact_copy(const iodef_time_impact_t *src, iodef_time_impact_t *dst);
int iodef_time_impact_clone(iodef_time_impact_t *src, iodef_time_impact_t **dst);
int iodef_time_impact_compare(const iodef_time_impact_t *obj1, const iodef_time_impact_t *obj2);
iodef_time_impact_t *iodef_time_impact_ref(iodef_time_impact_t *time_impact);

#ifndef SWIG
int _iodef_time_impact_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_time_impact_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_time_impact_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_time_impact_destroy(iodef_time_impact_t *ptr);
libiodef_string_t *iodef_time_impact_get_ext_metric(iodef_time_impact_t *ptr);
void iodef_time_impact_set_ext_metric(iodef_time_impact_t *ptr, libiodef_string_t *ext_metric);
int iodef_time_impact_new_ext_metric(iodef_time_impact_t *ptr, libiodef_string_t **ret);

iodef_time_impact_duration_t iodef_time_impact_get_duration(iodef_time_impact_t *ptr);
void iodef_time_impact_set_duration(iodef_time_impact_t *ptr, iodef_time_impact_duration_t duration);
int iodef_time_impact_new_duration(iodef_time_impact_t *ptr, iodef_time_impact_duration_t **ret);

iodef_time_impact_metric_t iodef_time_impact_get_metric(iodef_time_impact_t *ptr);
void iodef_time_impact_set_metric(iodef_time_impact_t *ptr, iodef_time_impact_metric_t metric);
int iodef_time_impact_new_metric(iodef_time_impact_t *ptr, iodef_time_impact_metric_t **ret);

iodef_time_impact_severity_t iodef_time_impact_get_severity(iodef_time_impact_t *ptr);
void iodef_time_impact_set_severity(iodef_time_impact_t *ptr, iodef_time_impact_severity_t severity);
int iodef_time_impact_new_severity(iodef_time_impact_t *ptr, iodef_time_impact_severity_t **ret);

libiodef_string_t *iodef_time_impact_get_ext_duration(iodef_time_impact_t *ptr);
void iodef_time_impact_set_ext_duration(iodef_time_impact_t *ptr, libiodef_string_t *ext_duration);
int iodef_time_impact_new_ext_duration(iodef_time_impact_t *ptr, libiodef_string_t **ret);

typedef enum {
        IODEF_IMPACT_LANG_ERROR = -1,
} iodef_impact_lang_t;


iodef_impact_lang_t iodef_impact_lang_to_numeric(const char *name);
const char *iodef_impact_lang_to_string(iodef_impact_lang_t val);


typedef enum {
        IODEF_IMPACT_COMPLETION_ERROR = -1,
        IODEF_IMPACT_COMPLETION_FAILED = 1,
        IODEF_IMPACT_COMPLETION_SUCCEEDED = 2,
} iodef_impact_completion_t;


iodef_impact_completion_t iodef_impact_completion_to_numeric(const char *name);
const char *iodef_impact_completion_to_string(iodef_impact_completion_t val);


typedef enum {
        IODEF_IMPACT_TYPE_ERROR = -1,
        IODEF_IMPACT_TYPE_ADMIN = 1,
        IODEF_IMPACT_TYPE_DOS = 2,
        IODEF_IMPACT_TYPE_FILE = 3,
        IODEF_IMPACT_TYPE_INFO_LEAK = 4,
        IODEF_IMPACT_TYPE_MISCONFIGURATION = 5,
        IODEF_IMPACT_TYPE_POLICY = 6,
        IODEF_IMPACT_TYPE_RECON = 7,
        IODEF_IMPACT_TYPE_SOCIAL_ENGINEERING = 8,
        IODEF_IMPACT_TYPE_USER = 9,
        IODEF_IMPACT_TYPE_UNKNOWN = 10,
        IODEF_IMPACT_TYPE_EXT_VALUE = 11,
} iodef_impact_type_t;


iodef_impact_type_t iodef_impact_type_to_numeric(const char *name);
const char *iodef_impact_type_to_string(iodef_impact_type_t val);


typedef enum {
        IODEF_IMPACT_SEVERITY_ERROR = -1,
        IODEF_IMPACT_SEVERITY_LOW = 1,
        IODEF_IMPACT_SEVERITY_MEDIUM = 2,
        IODEF_IMPACT_SEVERITY_HIGH = 3,
} iodef_impact_severity_t;


iodef_impact_severity_t iodef_impact_severity_to_numeric(const char *name);
const char *iodef_impact_severity_to_string(iodef_impact_severity_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_impact_lang_t lang;
 *         iodef_impact_completion_t completion;
 *         iodef_impact_type_t type;
 *         iodef_impact_severity_t severity;
 *         libiodef_string_t *ext_type;
 * } TYPE_ID(iodef_impact_t, 20);
 */


typedef struct iodef_impact iodef_impact_t;

int iodef_impact_new(iodef_impact_t **ret);
int iodef_impact_copy(const iodef_impact_t *src, iodef_impact_t *dst);
int iodef_impact_clone(iodef_impact_t *src, iodef_impact_t **dst);
int iodef_impact_compare(const iodef_impact_t *obj1, const iodef_impact_t *obj2);
iodef_impact_t *iodef_impact_ref(iodef_impact_t *impact);

#ifndef SWIG
int _iodef_impact_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_impact_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_impact_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_impact_destroy(iodef_impact_t *ptr);
iodef_impact_lang_t iodef_impact_get_lang(iodef_impact_t *ptr);
void iodef_impact_set_lang(iodef_impact_t *ptr, iodef_impact_lang_t lang);
int iodef_impact_new_lang(iodef_impact_t *ptr, iodef_impact_lang_t **ret);

iodef_impact_completion_t iodef_impact_get_completion(iodef_impact_t *ptr);
void iodef_impact_set_completion(iodef_impact_t *ptr, iodef_impact_completion_t completion);
int iodef_impact_new_completion(iodef_impact_t *ptr, iodef_impact_completion_t **ret);

iodef_impact_type_t iodef_impact_get_type(iodef_impact_t *ptr);
void iodef_impact_set_type(iodef_impact_t *ptr, iodef_impact_type_t type);
int iodef_impact_new_type(iodef_impact_t *ptr, iodef_impact_type_t **ret);

iodef_impact_severity_t iodef_impact_get_severity(iodef_impact_t *ptr);
void iodef_impact_set_severity(iodef_impact_t *ptr, iodef_impact_severity_t severity);
int iodef_impact_new_severity(iodef_impact_t *ptr, iodef_impact_severity_t **ret);

libiodef_string_t *iodef_impact_get_ext_type(iodef_impact_t *ptr);
void iodef_impact_set_ext_type(iodef_impact_t *ptr, libiodef_string_t *ext_type);
int iodef_impact_new_ext_type(iodef_impact_t *ptr, libiodef_string_t **ret);

typedef enum {
        IODEF_CONFIDENCE_RATING_ERROR = -1,
        IODEF_CONFIDENCE_RATING_LOW = 1,
        IODEF_CONFIDENCE_RATING_MEDIUM = 2,
        IODEF_CONFIDENCE_RATING_HIGH = 3,
        IODEF_CONFIDENCE_RATING_NUMERIC = 4,
} iodef_confidence_rating_t;


iodef_confidence_rating_t iodef_confidence_rating_to_numeric(const char *name);
const char *iodef_confidence_rating_to_string(iodef_confidence_rating_t val);




/*
 * struct {
 *         IODEF_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_confidence_rating_t rating;
 * } TYPE_ID(iodef_confidence_t, 21);
 */


typedef struct iodef_confidence iodef_confidence_t;

int iodef_confidence_new(iodef_confidence_t **ret);
int iodef_confidence_copy(const iodef_confidence_t *src, iodef_confidence_t *dst);
int iodef_confidence_clone(iodef_confidence_t *src, iodef_confidence_t **dst);
int iodef_confidence_compare(const iodef_confidence_t *obj1, const iodef_confidence_t *obj2);
iodef_confidence_t *iodef_confidence_ref(iodef_confidence_t *confidence);

#ifndef SWIG
int _iodef_confidence_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_confidence_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_confidence_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_confidence_destroy(iodef_confidence_t *ptr);
iodef_confidence_rating_t iodef_confidence_get_rating(iodef_confidence_t *ptr);
void iodef_confidence_set_rating(iodef_confidence_t *ptr, iodef_confidence_rating_t rating);
int iodef_confidence_new_rating(iodef_confidence_t *ptr, iodef_confidence_rating_t **ret);

typedef enum {
        IODEF_MONETARY_IMPACT_SEVERITY_ERROR = -1,
        IODEF_MONETARY_IMPACT_SEVERITY_LOW = 1,
        IODEF_MONETARY_IMPACT_SEVERITY_MEDIUM = 2,
        IODEF_MONETARY_IMPACT_SEVERITY_HIGH = 3,
} iodef_monetary_impact_severity_t;


iodef_monetary_impact_severity_t iodef_monetary_impact_severity_to_numeric(const char *name);
const char *iodef_monetary_impact_severity_to_string(iodef_monetary_impact_severity_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         REQUIRED(libiodef_string_t, *currency);
 *         iodef_monetary_impact_severity_t severity;
 * } TYPE_ID(iodef_monetary_impact_t, 22);
 */


typedef struct iodef_monetary_impact iodef_monetary_impact_t;

int iodef_monetary_impact_new(iodef_monetary_impact_t **ret);
int iodef_monetary_impact_copy(const iodef_monetary_impact_t *src, iodef_monetary_impact_t *dst);
int iodef_monetary_impact_clone(iodef_monetary_impact_t *src, iodef_monetary_impact_t **dst);
int iodef_monetary_impact_compare(const iodef_monetary_impact_t *obj1, const iodef_monetary_impact_t *obj2);
iodef_monetary_impact_t *iodef_monetary_impact_ref(iodef_monetary_impact_t *monetary_impact);

#ifndef SWIG
int _iodef_monetary_impact_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_monetary_impact_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_monetary_impact_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_monetary_impact_destroy(iodef_monetary_impact_t *ptr);
libiodef_string_t *iodef_monetary_impact_get_currency(iodef_monetary_impact_t *ptr);
void iodef_monetary_impact_set_currency(iodef_monetary_impact_t *ptr, libiodef_string_t *currency);
int iodef_monetary_impact_new_currency(iodef_monetary_impact_t *ptr, libiodef_string_t **ret);

iodef_monetary_impact_severity_t iodef_monetary_impact_get_severity(iodef_monetary_impact_t *ptr);
void iodef_monetary_impact_set_severity(iodef_monetary_impact_t *ptr, iodef_monetary_impact_severity_t severity);
int iodef_monetary_impact_new_severity(iodef_monetary_impact_t *ptr, iodef_monetary_impact_severity_t **ret);

typedef enum {
        IODEF_COUNTER_DURATION_ERROR = -1,
} iodef_counter_duration_t;


iodef_counter_duration_t iodef_counter_duration_to_numeric(const char *name);
const char *iodef_counter_duration_to_string(iodef_counter_duration_t val);


typedef enum {
        IODEF_COUNTER_TYPE_ERROR = -1,
        IODEF_COUNTER_TYPE_BYTE = 1,
        IODEF_COUNTER_TYPE_PACKET = 2,
        IODEF_COUNTER_TYPE_FLOW = 3,
        IODEF_COUNTER_TYPE_SESSION = 4,
        IODEF_COUNTER_TYPE_ALERT = 5,
        IODEF_COUNTER_TYPE_MESSAGE = 6,
        IODEF_COUNTER_TYPE_EVENT = 7,
        IODEF_COUNTER_TYPE_HOST = 8,
        IODEF_COUNTER_TYPE_SITE = 9,
        IODEF_COUNTER_TYPE_ORGANIZATION = 10,
        IODEF_COUNTER_TYPE_EXT_VALUE = 11,
} iodef_counter_type_t;


iodef_counter_type_t iodef_counter_type_to_numeric(const char *name);
const char *iodef_counter_type_to_string(iodef_counter_type_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_counter_duration_t duration;
 *         iodef_counter_type_t type;
 *         libiodef_string_t *ext_duration;
 *         libiodef_string_t *ext_type;
 * } TYPE_ID(iodef_counter_t, 23);
 */


typedef struct iodef_counter iodef_counter_t;

int iodef_counter_new(iodef_counter_t **ret);
int iodef_counter_copy(const iodef_counter_t *src, iodef_counter_t *dst);
int iodef_counter_clone(iodef_counter_t *src, iodef_counter_t **dst);
int iodef_counter_compare(const iodef_counter_t *obj1, const iodef_counter_t *obj2);
iodef_counter_t *iodef_counter_ref(iodef_counter_t *counter);

#ifndef SWIG
int _iodef_counter_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_counter_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_counter_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_counter_destroy(iodef_counter_t *ptr);
iodef_counter_duration_t iodef_counter_get_duration(iodef_counter_t *ptr);
void iodef_counter_set_duration(iodef_counter_t *ptr, iodef_counter_duration_t duration);
int iodef_counter_new_duration(iodef_counter_t *ptr, iodef_counter_duration_t **ret);

iodef_counter_type_t iodef_counter_get_type(iodef_counter_t *ptr);
void iodef_counter_set_type(iodef_counter_t *ptr, iodef_counter_type_t type);
int iodef_counter_new_type(iodef_counter_t *ptr, iodef_counter_type_t **ret);

libiodef_string_t *iodef_counter_get_ext_duration(iodef_counter_t *ptr);
void iodef_counter_set_ext_duration(iodef_counter_t *ptr, libiodef_string_t *ext_duration);
int iodef_counter_new_ext_duration(iodef_counter_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_counter_get_ext_type(iodef_counter_t *ptr);
void iodef_counter_set_ext_type(iodef_counter_t *ptr, libiodef_string_t *ext_type);
int iodef_counter_new_ext_type(iodef_counter_t *ptr, libiodef_string_t **ret);

typedef enum {
        IODEF_ASSESSMENT_RESTRICTION_ERROR = -1,
} iodef_assessment_restriction_t;


iodef_assessment_restriction_t iodef_assessment_restriction_to_numeric(const char *name);
const char *iodef_assessment_restriction_to_string(iodef_assessment_restriction_t val);


typedef enum {
        IODEF_ASSESSMENT_OCCURRENCE_ERROR = -1,
        IODEF_ASSESSMENT_OCCURRENCE_ACTUAL = 1,
        IODEF_ASSESSMENT_OCCURRENCE_POTENTIAL = 2,
} iodef_assessment_occurrence_t;


iodef_assessment_occurrence_t iodef_assessment_occurrence_to_numeric(const char *name);
const char *iodef_assessment_occurrence_to_string(iodef_assessment_occurrence_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         LISTED_OBJECT(impact_list, iodef_impact_t);
 *         LISTED_OBJECT(additional_data_list, iodef_additional_data_t);
 *         iodef_confidence_t *confidence;
 *         LISTED_OBJECT(time_impact_list, iodef_time_impact_t);
 *         LISTED_OBJECT(monetary_impact_list, iodef_monetary_impact_t);
 *         LISTED_OBJECT(counter_list, iodef_counter_t);
 *         iodef_assessment_restriction_t restriction;
 *         iodef_assessment_occurrence_t occurrence;
 * } TYPE_ID(iodef_assessment_t, 24);
 */


typedef struct iodef_assessment iodef_assessment_t;

int iodef_assessment_new(iodef_assessment_t **ret);
int iodef_assessment_copy(const iodef_assessment_t *src, iodef_assessment_t *dst);
int iodef_assessment_clone(iodef_assessment_t *src, iodef_assessment_t **dst);
int iodef_assessment_compare(const iodef_assessment_t *obj1, const iodef_assessment_t *obj2);
iodef_assessment_t *iodef_assessment_ref(iodef_assessment_t *assessment);

#ifndef SWIG
int _iodef_assessment_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_assessment_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_assessment_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_assessment_destroy(iodef_assessment_t *ptr);
iodef_impact_t *iodef_assessment_get_next_impact(iodef_assessment_t *assessment, iodef_impact_t *impact_cur);
void iodef_assessment_set_impact(iodef_assessment_t *ptr, iodef_impact_t *object, int pos);
int iodef_assessment_new_impact(iodef_assessment_t *ptr, iodef_impact_t **ret, int pos);

iodef_additional_data_t *iodef_assessment_get_next_additional_data(iodef_assessment_t *assessment, iodef_additional_data_t *additional_data_cur);
void iodef_assessment_set_additional_data(iodef_assessment_t *ptr, iodef_additional_data_t *object, int pos);
int iodef_assessment_new_additional_data(iodef_assessment_t *ptr, iodef_additional_data_t **ret, int pos);

iodef_confidence_t *iodef_assessment_get_confidence(iodef_assessment_t *ptr);
void iodef_assessment_set_confidence(iodef_assessment_t *ptr, iodef_confidence_t *confidence);
int iodef_assessment_new_confidence(iodef_assessment_t *ptr, iodef_confidence_t **ret);

iodef_time_impact_t *iodef_assessment_get_next_time_impact(iodef_assessment_t *assessment, iodef_time_impact_t *time_impact_cur);
void iodef_assessment_set_time_impact(iodef_assessment_t *ptr, iodef_time_impact_t *object, int pos);
int iodef_assessment_new_time_impact(iodef_assessment_t *ptr, iodef_time_impact_t **ret, int pos);

iodef_monetary_impact_t *iodef_assessment_get_next_monetary_impact(iodef_assessment_t *assessment, iodef_monetary_impact_t *monetary_impact_cur);
void iodef_assessment_set_monetary_impact(iodef_assessment_t *ptr, iodef_monetary_impact_t *object, int pos);
int iodef_assessment_new_monetary_impact(iodef_assessment_t *ptr, iodef_monetary_impact_t **ret, int pos);

iodef_counter_t *iodef_assessment_get_next_counter(iodef_assessment_t *assessment, iodef_counter_t *counter_cur);
void iodef_assessment_set_counter(iodef_assessment_t *ptr, iodef_counter_t *object, int pos);
int iodef_assessment_new_counter(iodef_assessment_t *ptr, iodef_counter_t **ret, int pos);

iodef_assessment_restriction_t iodef_assessment_get_restriction(iodef_assessment_t *ptr);
void iodef_assessment_set_restriction(iodef_assessment_t *ptr, iodef_assessment_restriction_t restriction);
int iodef_assessment_new_restriction(iodef_assessment_t *ptr, iodef_assessment_restriction_t **ret);

iodef_assessment_occurrence_t iodef_assessment_get_occurrence(iodef_assessment_t *ptr);
void iodef_assessment_set_occurrence(iodef_assessment_t *ptr, iodef_assessment_occurrence_t occurrence);
int iodef_assessment_new_occurrence(iodef_assessment_t *ptr, iodef_assessment_occurrence_t **ret);



/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         OPTIONAL_INT(uint32_t, proto_code);
 *         OPTIONAL_INT(uint32_t, proto_flags);
 *         libiodef_string_t *portlist;
 *         LISTED_OBJECT(application_list, iodef_application_t);
 *         OPTIONAL_INT(uint32_t, proto_type);
 *         OPTIONAL_INT(uint32_t, port);
 *         OPTIONAL_INT(uint32_t, ip_protocol);
 * } TYPE_ID(iodef_service_t, 25);
 */


typedef struct iodef_service iodef_service_t;

int iodef_service_new(iodef_service_t **ret);
int iodef_service_copy(const iodef_service_t *src, iodef_service_t *dst);
int iodef_service_clone(iodef_service_t *src, iodef_service_t **dst);
int iodef_service_compare(const iodef_service_t *obj1, const iodef_service_t *obj2);
iodef_service_t *iodef_service_ref(iodef_service_t *service);

#ifndef SWIG
int _iodef_service_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_service_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_service_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_service_destroy(iodef_service_t *ptr);
void iodef_service_unset_proto_code(iodef_service_t *ptr);
uint32_t *iodef_service_get_proto_code(iodef_service_t *ptr);
void iodef_service_set_proto_code(iodef_service_t *ptr, uint32_t proto_code);
int iodef_service_new_proto_code(iodef_service_t *ptr, uint32_t **ret);

void iodef_service_unset_proto_flags(iodef_service_t *ptr);
uint32_t *iodef_service_get_proto_flags(iodef_service_t *ptr);
void iodef_service_set_proto_flags(iodef_service_t *ptr, uint32_t proto_flags);
int iodef_service_new_proto_flags(iodef_service_t *ptr, uint32_t **ret);

libiodef_string_t *iodef_service_get_portlist(iodef_service_t *ptr);
void iodef_service_set_portlist(iodef_service_t *ptr, libiodef_string_t *portlist);
int iodef_service_new_portlist(iodef_service_t *ptr, libiodef_string_t **ret);

iodef_application_t *iodef_service_get_next_application(iodef_service_t *service, iodef_application_t *application_cur);
void iodef_service_set_application(iodef_service_t *ptr, iodef_application_t *object, int pos);
int iodef_service_new_application(iodef_service_t *ptr, iodef_application_t **ret, int pos);

void iodef_service_unset_proto_type(iodef_service_t *ptr);
uint32_t *iodef_service_get_proto_type(iodef_service_t *ptr);
void iodef_service_set_proto_type(iodef_service_t *ptr, uint32_t proto_type);
int iodef_service_new_proto_type(iodef_service_t *ptr, uint32_t **ret);

void iodef_service_unset_port(iodef_service_t *ptr);
uint32_t *iodef_service_get_port(iodef_service_t *ptr);
void iodef_service_set_port(iodef_service_t *ptr, uint32_t port);
int iodef_service_new_port(iodef_service_t *ptr, uint32_t **ret);

void iodef_service_unset_ip_protocol(iodef_service_t *ptr);
uint32_t *iodef_service_get_ip_protocol(iodef_service_t *ptr);
void iodef_service_set_ip_protocol(iodef_service_t *ptr, uint32_t ip_protocol);
int iodef_service_new_ip_protocol(iodef_service_t *ptr, uint32_t **ret);

typedef enum {
        IODEF_ADDRESS_CATEGORY_ERROR = -1,
        IODEF_ADDRESS_CATEGORY_ASN = 1,
        IODEF_ADDRESS_CATEGORY_ATM = 2,
        IODEF_ADDRESS_CATEGORY_E_MAIL = 3,
        IODEF_ADDRESS_CATEGORY_IPV4_ADDR = 4,
        IODEF_ADDRESS_CATEGORY_IPV4_NET = 5,
        IODEF_ADDRESS_CATEGORY_IPV4_NET_MASK = 6,
        IODEF_ADDRESS_CATEGORY_IPV6_ADDR = 7,
        IODEF_ADDRESS_CATEGORY_IPV6_NET = 8,
        IODEF_ADDRESS_CATEGORY_IPV6_NET_MASK = 9,
        IODEF_ADDRESS_CATEGORY_MAC = 10,
        IODEF_ADDRESS_CATEGORY_EXT_VALUE = 11,
} iodef_address_category_t;


iodef_address_category_t iodef_address_category_to_numeric(const char *name);
const char *iodef_address_category_to_string(iodef_address_category_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_address_category_t category;
 *         libiodef_string_t *vlan_name;
 *         libiodef_string_t *ext_category;
 *         libiodef_string_t *vlan_num;
 * } TYPE_ID(iodef_address_t, 27);
 */


typedef struct iodef_address iodef_address_t;

int iodef_address_new(iodef_address_t **ret);
int iodef_address_copy(const iodef_address_t *src, iodef_address_t *dst);
int iodef_address_clone(iodef_address_t *src, iodef_address_t **dst);
int iodef_address_compare(const iodef_address_t *obj1, const iodef_address_t *obj2);
iodef_address_t *iodef_address_ref(iodef_address_t *address);

#ifndef SWIG
int _iodef_address_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_address_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_address_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_address_destroy(iodef_address_t *ptr);
iodef_address_category_t iodef_address_get_category(iodef_address_t *ptr);
void iodef_address_set_category(iodef_address_t *ptr, iodef_address_category_t category);
int iodef_address_new_category(iodef_address_t *ptr, iodef_address_category_t **ret);

libiodef_string_t *iodef_address_get_vlan_name(iodef_address_t *ptr);
void iodef_address_set_vlan_name(iodef_address_t *ptr, libiodef_string_t *vlan_name);
int iodef_address_new_vlan_name(iodef_address_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_address_get_ext_category(iodef_address_t *ptr);
void iodef_address_set_ext_category(iodef_address_t *ptr, libiodef_string_t *ext_category);
int iodef_address_new_ext_category(iodef_address_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_address_get_vlan_num(iodef_address_t *ptr);
void iodef_address_set_vlan_num(iodef_address_t *ptr, libiodef_string_t *vlan_num);
int iodef_address_new_vlan_num(iodef_address_t *ptr, libiodef_string_t **ret);

typedef enum {
        IODEF_NODE_ROLE_CATEGORY_ERROR = -1,
        IODEF_NODE_ROLE_CATEGORY_CLIENT = 1,
        IODEF_NODE_ROLE_CATEGORY_SERVER_INTERNAL = 2,
        IODEF_NODE_ROLE_CATEGORY_SERVER_PUBLIC = 3,
        IODEF_NODE_ROLE_CATEGORY_WWW = 4,
        IODEF_NODE_ROLE_CATEGORY_MAIL = 5,
        IODEF_NODE_ROLE_CATEGORY_MESSAGING = 6,
        IODEF_NODE_ROLE_CATEGORY_STREAMING = 7,
        IODEF_NODE_ROLE_CATEGORY_VOICE = 8,
        IODEF_NODE_ROLE_CATEGORY_FILE = 9,
        IODEF_NODE_ROLE_CATEGORY_FTP = 10,
        IODEF_NODE_ROLE_CATEGORY_P2P = 11,
        IODEF_NODE_ROLE_CATEGORY_NAME = 12,
        IODEF_NODE_ROLE_CATEGORY_DIRECTORY = 13,
        IODEF_NODE_ROLE_CATEGORY_CREDENTIAL = 14,
        IODEF_NODE_ROLE_CATEGORY_PRINT = 15,
        IODEF_NODE_ROLE_CATEGORY_APPLICATION = 16,
        IODEF_NODE_ROLE_CATEGORY_DATABASE = 17,
        IODEF_NODE_ROLE_CATEGORY_INFRA = 18,
        IODEF_NODE_ROLE_CATEGORY_LOG = 19,
        IODEF_NODE_ROLE_CATEGORY_EXT_VALUE = 20,
} iodef_node_role_category_t;


iodef_node_role_category_t iodef_node_role_category_to_numeric(const char *name);
const char *iodef_node_role_category_to_string(iodef_node_role_category_t val);


typedef enum {
        IODEF_NODE_ROLE_LANG_ERROR = -1,
} iodef_node_role_lang_t;


iodef_node_role_lang_t iodef_node_role_lang_to_numeric(const char *name);
const char *iodef_node_role_lang_to_string(iodef_node_role_lang_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_node_role_category_t category;
 *         iodef_node_role_lang_t lang;
 *         libiodef_string_t *ext_category;
 * } TYPE_ID(iodef_node_role_t, 28);
 */


typedef struct iodef_node_role iodef_node_role_t;

int iodef_node_role_new(iodef_node_role_t **ret);
int iodef_node_role_copy(const iodef_node_role_t *src, iodef_node_role_t *dst);
int iodef_node_role_clone(iodef_node_role_t *src, iodef_node_role_t **dst);
int iodef_node_role_compare(const iodef_node_role_t *obj1, const iodef_node_role_t *obj2);
iodef_node_role_t *iodef_node_role_ref(iodef_node_role_t *node_role);

#ifndef SWIG
int _iodef_node_role_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_node_role_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_node_role_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_node_role_destroy(iodef_node_role_t *ptr);
iodef_node_role_category_t iodef_node_role_get_category(iodef_node_role_t *ptr);
void iodef_node_role_set_category(iodef_node_role_t *ptr, iodef_node_role_category_t category);
int iodef_node_role_new_category(iodef_node_role_t *ptr, iodef_node_role_category_t **ret);

iodef_node_role_lang_t iodef_node_role_get_lang(iodef_node_role_t *ptr);
void iodef_node_role_set_lang(iodef_node_role_t *ptr, iodef_node_role_lang_t lang);
int iodef_node_role_new_lang(iodef_node_role_t *ptr, iodef_node_role_lang_t **ret);

libiodef_string_t *iodef_node_role_get_ext_category(iodef_node_role_t *ptr);
void iodef_node_role_set_ext_category(iodef_node_role_t *ptr, libiodef_string_t *ext_category);
int iodef_node_role_new_ext_category(iodef_node_role_t *ptr, libiodef_string_t **ret);



/*
 * struct {
 *         IODEF_OBJECT;
 *         REFCOUNT;
 * 
 *         LISTED_OBJECT(node_name_list, libiodef_string_t);
 *         LISTED_OBJECT(counter_list, iodef_counter_t);
 *         iodef_time_t *date_time;
 *         LISTED_OBJECT(node_role_list, iodef_node_role_t);
 *         libiodef_string_t *location;
 *         LISTED_OBJECT(address_list, iodef_address_t);
 * } TYPE_ID(iodef_node_t, 29);
 */


typedef struct iodef_node iodef_node_t;

int iodef_node_new(iodef_node_t **ret);
int iodef_node_copy(const iodef_node_t *src, iodef_node_t *dst);
int iodef_node_clone(iodef_node_t *src, iodef_node_t **dst);
int iodef_node_compare(const iodef_node_t *obj1, const iodef_node_t *obj2);
iodef_node_t *iodef_node_ref(iodef_node_t *node);

#ifndef SWIG
int _iodef_node_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_node_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_node_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_node_destroy(iodef_node_t *ptr);
libiodef_string_t *iodef_node_get_next_node_name(iodef_node_t *node, libiodef_string_t *libiodef_string_cur);
void iodef_node_set_node_name(iodef_node_t *ptr, libiodef_string_t *object, int pos);
int iodef_node_new_node_name(iodef_node_t *ptr, libiodef_string_t **ret, int pos);

iodef_counter_t *iodef_node_get_next_counter(iodef_node_t *node, iodef_counter_t *counter_cur);
void iodef_node_set_counter(iodef_node_t *ptr, iodef_counter_t *object, int pos);
int iodef_node_new_counter(iodef_node_t *ptr, iodef_counter_t **ret, int pos);

iodef_time_t *iodef_node_get_date_time(iodef_node_t *ptr);
void iodef_node_set_date_time(iodef_node_t *ptr, iodef_time_t *date_time);
int iodef_node_new_date_time(iodef_node_t *ptr, iodef_time_t **ret);

iodef_node_role_t *iodef_node_get_next_node_role(iodef_node_t *node, iodef_node_role_t *node_role_cur);
void iodef_node_set_node_role(iodef_node_t *ptr, iodef_node_role_t *object, int pos);
int iodef_node_new_node_role(iodef_node_t *ptr, iodef_node_role_t **ret, int pos);

libiodef_string_t *iodef_node_get_location(iodef_node_t *ptr);
void iodef_node_set_location(iodef_node_t *ptr, libiodef_string_t *location);
int iodef_node_new_location(iodef_node_t *ptr, libiodef_string_t **ret);

iodef_address_t *iodef_node_get_next_address(iodef_node_t *node, iodef_address_t *address_cur);
void iodef_node_set_address(iodef_node_t *ptr, iodef_address_t *object, int pos);
int iodef_node_new_address(iodef_node_t *ptr, iodef_address_t **ret, int pos);



/*
 * struct {
 *         IODEF_OBJECT;
 *         REFCOUNT;
 * 
 *         libiodef_string_t *url;
 *         libiodef_string_t *vendor;
 *         libiodef_string_t *name;
 *         libiodef_string_t *family;
 *         libiodef_string_t *swid;
 *         libiodef_string_t *patch;
 *         libiodef_string_t *version;
 *         libiodef_string_t *configid;
 * } TYPE_ID(iodef_operating_system_t, 30);
 */


typedef struct iodef_operating_system iodef_operating_system_t;

int iodef_operating_system_new(iodef_operating_system_t **ret);
int iodef_operating_system_copy(const iodef_operating_system_t *src, iodef_operating_system_t *dst);
int iodef_operating_system_clone(iodef_operating_system_t *src, iodef_operating_system_t **dst);
int iodef_operating_system_compare(const iodef_operating_system_t *obj1, const iodef_operating_system_t *obj2);
iodef_operating_system_t *iodef_operating_system_ref(iodef_operating_system_t *operating_system);

#ifndef SWIG
int _iodef_operating_system_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_operating_system_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_operating_system_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_operating_system_destroy(iodef_operating_system_t *ptr);
libiodef_string_t *iodef_operating_system_get_url(iodef_operating_system_t *ptr);
void iodef_operating_system_set_url(iodef_operating_system_t *ptr, libiodef_string_t *url);
int iodef_operating_system_new_url(iodef_operating_system_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_operating_system_get_vendor(iodef_operating_system_t *ptr);
void iodef_operating_system_set_vendor(iodef_operating_system_t *ptr, libiodef_string_t *vendor);
int iodef_operating_system_new_vendor(iodef_operating_system_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_operating_system_get_name(iodef_operating_system_t *ptr);
void iodef_operating_system_set_name(iodef_operating_system_t *ptr, libiodef_string_t *name);
int iodef_operating_system_new_name(iodef_operating_system_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_operating_system_get_family(iodef_operating_system_t *ptr);
void iodef_operating_system_set_family(iodef_operating_system_t *ptr, libiodef_string_t *family);
int iodef_operating_system_new_family(iodef_operating_system_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_operating_system_get_swid(iodef_operating_system_t *ptr);
void iodef_operating_system_set_swid(iodef_operating_system_t *ptr, libiodef_string_t *swid);
int iodef_operating_system_new_swid(iodef_operating_system_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_operating_system_get_patch(iodef_operating_system_t *ptr);
void iodef_operating_system_set_patch(iodef_operating_system_t *ptr, libiodef_string_t *patch);
int iodef_operating_system_new_patch(iodef_operating_system_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_operating_system_get_version(iodef_operating_system_t *ptr);
void iodef_operating_system_set_version(iodef_operating_system_t *ptr, libiodef_string_t *version);
int iodef_operating_system_new_version(iodef_operating_system_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_operating_system_get_configid(iodef_operating_system_t *ptr);
void iodef_operating_system_set_configid(iodef_operating_system_t *ptr, libiodef_string_t *configid);
int iodef_operating_system_new_configid(iodef_operating_system_t *ptr, libiodef_string_t **ret);

typedef enum {
        IODEF_SYSTEM_CATEGORY_ERROR = -1,
        IODEF_SYSTEM_CATEGORY_SOURCE = 1,
        IODEF_SYSTEM_CATEGORY_TARGET = 2,
        IODEF_SYSTEM_CATEGORY_INTERMEDIATE = 3,
        IODEF_SYSTEM_CATEGORY_SENSOR = 4,
        IODEF_SYSTEM_CATEGORY_INFRASTRUCTURE = 5,
        IODEF_SYSTEM_CATEGORY_EXT_VALUE = 6,
} iodef_system_category_t;


iodef_system_category_t iodef_system_category_to_numeric(const char *name);
const char *iodef_system_category_to_string(iodef_system_category_t val);


typedef enum {
        IODEF_SYSTEM_RESTRICTION_ERROR = -1,
} iodef_system_restriction_t;


iodef_system_restriction_t iodef_system_restriction_to_numeric(const char *name);
const char *iodef_system_restriction_to_string(iodef_system_restriction_t val);


typedef enum {
        IODEF_SYSTEM_SPOOFED_ERROR = -1,
        IODEF_SYSTEM_SPOOFED_UNKNOWN = 1,
        IODEF_SYSTEM_SPOOFED_YES = 2,
        IODEF_SYSTEM_SPOOFED_NO = 3,
} iodef_system_spoofed_t;


iodef_system_spoofed_t iodef_system_spoofed_to_numeric(const char *name);
const char *iodef_system_spoofed_to_string(iodef_system_spoofed_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         REQUIRED(iodef_node_t, *node);
 *         LISTED_OBJECT(additional_data_list, iodef_additional_data_t);
 *         LISTED_OBJECT(description_list, libiodef_string_t);
 *         LISTED_OBJECT(service_list, iodef_service_t);
 *         LISTED_OBJECT(counter_list, iodef_counter_t);
 *         iodef_operating_system_t *operating_system;
 *         iodef_system_category_t category;
 *         iodef_system_restriction_t restriction;
 *         libiodef_string_t *ext_category;
 *         iodef_system_spoofed_t spoofed;
 *         libiodef_string_t *interface;
 * } TYPE_ID(iodef_system_t, 31);
 */


typedef struct iodef_system iodef_system_t;

int iodef_system_new(iodef_system_t **ret);
int iodef_system_copy(const iodef_system_t *src, iodef_system_t *dst);
int iodef_system_clone(iodef_system_t *src, iodef_system_t **dst);
int iodef_system_compare(const iodef_system_t *obj1, const iodef_system_t *obj2);
iodef_system_t *iodef_system_ref(iodef_system_t *system);

#ifndef SWIG
int _iodef_system_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_system_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_system_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_system_destroy(iodef_system_t *ptr);
iodef_node_t *iodef_system_get_node(iodef_system_t *ptr);
void iodef_system_set_node(iodef_system_t *ptr, iodef_node_t *node);
int iodef_system_new_node(iodef_system_t *ptr, iodef_node_t **ret);

iodef_additional_data_t *iodef_system_get_next_additional_data(iodef_system_t *system, iodef_additional_data_t *additional_data_cur);
void iodef_system_set_additional_data(iodef_system_t *ptr, iodef_additional_data_t *object, int pos);
int iodef_system_new_additional_data(iodef_system_t *ptr, iodef_additional_data_t **ret, int pos);

libiodef_string_t *iodef_system_get_next_description(iodef_system_t *system, libiodef_string_t *libiodef_string_cur);
void iodef_system_set_description(iodef_system_t *ptr, libiodef_string_t *object, int pos);
int iodef_system_new_description(iodef_system_t *ptr, libiodef_string_t **ret, int pos);

iodef_service_t *iodef_system_get_next_service(iodef_system_t *system, iodef_service_t *service_cur);
void iodef_system_set_service(iodef_system_t *ptr, iodef_service_t *object, int pos);
int iodef_system_new_service(iodef_system_t *ptr, iodef_service_t **ret, int pos);

iodef_counter_t *iodef_system_get_next_counter(iodef_system_t *system, iodef_counter_t *counter_cur);
void iodef_system_set_counter(iodef_system_t *ptr, iodef_counter_t *object, int pos);
int iodef_system_new_counter(iodef_system_t *ptr, iodef_counter_t **ret, int pos);

iodef_operating_system_t *iodef_system_get_operating_system(iodef_system_t *ptr);
void iodef_system_set_operating_system(iodef_system_t *ptr, iodef_operating_system_t *operating_system);
int iodef_system_new_operating_system(iodef_system_t *ptr, iodef_operating_system_t **ret);

iodef_system_category_t iodef_system_get_category(iodef_system_t *ptr);
void iodef_system_set_category(iodef_system_t *ptr, iodef_system_category_t category);
int iodef_system_new_category(iodef_system_t *ptr, iodef_system_category_t **ret);

iodef_system_restriction_t iodef_system_get_restriction(iodef_system_t *ptr);
void iodef_system_set_restriction(iodef_system_t *ptr, iodef_system_restriction_t restriction);
int iodef_system_new_restriction(iodef_system_t *ptr, iodef_system_restriction_t **ret);

libiodef_string_t *iodef_system_get_ext_category(iodef_system_t *ptr);
void iodef_system_set_ext_category(iodef_system_t *ptr, libiodef_string_t *ext_category);
int iodef_system_new_ext_category(iodef_system_t *ptr, libiodef_string_t **ret);

iodef_system_spoofed_t iodef_system_get_spoofed(iodef_system_t *ptr);
void iodef_system_set_spoofed(iodef_system_t *ptr, iodef_system_spoofed_t spoofed);
int iodef_system_new_spoofed(iodef_system_t *ptr, iodef_system_spoofed_t **ret);

libiodef_string_t *iodef_system_get_interface(iodef_system_t *ptr);
void iodef_system_set_interface(iodef_system_t *ptr, libiodef_string_t *interface);
int iodef_system_new_interface(iodef_system_t *ptr, libiodef_string_t **ret);



/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         LISTED_OBJECT(system_list, iodef_system_t);
 * } TYPE_ID(iodef_flow_t, 32);
 */


typedef struct iodef_flow iodef_flow_t;

int iodef_flow_new(iodef_flow_t **ret);
int iodef_flow_copy(const iodef_flow_t *src, iodef_flow_t *dst);
int iodef_flow_clone(iodef_flow_t *src, iodef_flow_t **dst);
int iodef_flow_compare(const iodef_flow_t *obj1, const iodef_flow_t *obj2);
iodef_flow_t *iodef_flow_ref(iodef_flow_t *flow);

#ifndef SWIG
int _iodef_flow_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_flow_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_flow_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_flow_destroy(iodef_flow_t *ptr);
iodef_system_t *iodef_flow_get_next_system(iodef_flow_t *flow, iodef_system_t *system_cur);
void iodef_flow_set_system(iodef_flow_t *ptr, iodef_system_t *object, int pos);
int iodef_flow_new_system(iodef_flow_t *ptr, iodef_system_t **ret, int pos);

typedef enum {
        IODEF_EVENT_DATA_RESTRICTION_ERROR = -1,
} iodef_event_data_restriction_t;


iodef_event_data_restriction_t iodef_event_data_restriction_to_numeric(const char *name);
const char *iodef_event_data_restriction_to_string(iodef_event_data_restriction_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_time_t *detect_time;
 *         LISTED_OBJECT(additional_data_list, iodef_additional_data_t);
 *         LISTED_OBJECT(description_list, libiodef_string_t);
 *         LISTED_OBJECT(flow_list, iodef_flow_t);
 *         LISTED_OBJECT(expectation_list, iodef_expectation_t);
 *         iodef_record_t *record;
 *         LISTED_OBJECT(contact_list, iodef_contact_t);
 *         iodef_time_t *start_time;
 *         LISTED_OBJECT(event_data_list, iodef_event_data_t);
 *         iodef_time_t *end_time;
 *         iodef_assessment_t *assessment;
 *         LISTED_OBJECT(method_list, iodef_method_t);
 *         iodef_event_data_restriction_t restriction;
 * } TYPE_ID(iodef_event_data_t, 33);
 */


typedef struct iodef_event_data iodef_event_data_t;

int iodef_event_data_new(iodef_event_data_t **ret);
int iodef_event_data_copy(const iodef_event_data_t *src, iodef_event_data_t *dst);
int iodef_event_data_clone(iodef_event_data_t *src, iodef_event_data_t **dst);
int iodef_event_data_compare(const iodef_event_data_t *obj1, const iodef_event_data_t *obj2);
iodef_event_data_t *iodef_event_data_ref(iodef_event_data_t *event_data);

#ifndef SWIG
int _iodef_event_data_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_event_data_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_event_data_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_event_data_destroy(iodef_event_data_t *ptr);
iodef_time_t *iodef_event_data_get_detect_time(iodef_event_data_t *ptr);
void iodef_event_data_set_detect_time(iodef_event_data_t *ptr, iodef_time_t *detect_time);
int iodef_event_data_new_detect_time(iodef_event_data_t *ptr, iodef_time_t **ret);

iodef_additional_data_t *iodef_event_data_get_next_additional_data(iodef_event_data_t *event_data, iodef_additional_data_t *additional_data_cur);
void iodef_event_data_set_additional_data(iodef_event_data_t *ptr, iodef_additional_data_t *object, int pos);
int iodef_event_data_new_additional_data(iodef_event_data_t *ptr, iodef_additional_data_t **ret, int pos);

libiodef_string_t *iodef_event_data_get_next_description(iodef_event_data_t *event_data, libiodef_string_t *libiodef_string_cur);
void iodef_event_data_set_description(iodef_event_data_t *ptr, libiodef_string_t *object, int pos);
int iodef_event_data_new_description(iodef_event_data_t *ptr, libiodef_string_t **ret, int pos);

iodef_flow_t *iodef_event_data_get_next_flow(iodef_event_data_t *event_data, iodef_flow_t *flow_cur);
void iodef_event_data_set_flow(iodef_event_data_t *ptr, iodef_flow_t *object, int pos);
int iodef_event_data_new_flow(iodef_event_data_t *ptr, iodef_flow_t **ret, int pos);

iodef_expectation_t *iodef_event_data_get_next_expectation(iodef_event_data_t *event_data, iodef_expectation_t *expectation_cur);
void iodef_event_data_set_expectation(iodef_event_data_t *ptr, iodef_expectation_t *object, int pos);
int iodef_event_data_new_expectation(iodef_event_data_t *ptr, iodef_expectation_t **ret, int pos);

iodef_record_t *iodef_event_data_get_record(iodef_event_data_t *ptr);
void iodef_event_data_set_record(iodef_event_data_t *ptr, iodef_record_t *record);
int iodef_event_data_new_record(iodef_event_data_t *ptr, iodef_record_t **ret);

iodef_contact_t *iodef_event_data_get_next_contact(iodef_event_data_t *event_data, iodef_contact_t *contact_cur);
void iodef_event_data_set_contact(iodef_event_data_t *ptr, iodef_contact_t *object, int pos);
int iodef_event_data_new_contact(iodef_event_data_t *ptr, iodef_contact_t **ret, int pos);

iodef_time_t *iodef_event_data_get_start_time(iodef_event_data_t *ptr);
void iodef_event_data_set_start_time(iodef_event_data_t *ptr, iodef_time_t *start_time);
int iodef_event_data_new_start_time(iodef_event_data_t *ptr, iodef_time_t **ret);

iodef_event_data_t *iodef_event_data_get_next_event_data(iodef_event_data_t *event_data, iodef_event_data_t *event_data_cur);
void iodef_event_data_set_event_data(iodef_event_data_t *ptr, iodef_event_data_t *object, int pos);
int iodef_event_data_new_event_data(iodef_event_data_t *ptr, iodef_event_data_t **ret, int pos);

iodef_time_t *iodef_event_data_get_end_time(iodef_event_data_t *ptr);
void iodef_event_data_set_end_time(iodef_event_data_t *ptr, iodef_time_t *end_time);
int iodef_event_data_new_end_time(iodef_event_data_t *ptr, iodef_time_t **ret);

iodef_assessment_t *iodef_event_data_get_assessment(iodef_event_data_t *ptr);
void iodef_event_data_set_assessment(iodef_event_data_t *ptr, iodef_assessment_t *assessment);
int iodef_event_data_new_assessment(iodef_event_data_t *ptr, iodef_assessment_t **ret);

iodef_method_t *iodef_event_data_get_next_method(iodef_event_data_t *event_data, iodef_method_t *method_cur);
void iodef_event_data_set_method(iodef_event_data_t *ptr, iodef_method_t *object, int pos);
int iodef_event_data_new_method(iodef_event_data_t *ptr, iodef_method_t **ret, int pos);

iodef_event_data_restriction_t iodef_event_data_get_restriction(iodef_event_data_t *ptr);
void iodef_event_data_set_restriction(iodef_event_data_t *ptr, iodef_event_data_restriction_t restriction);
int iodef_event_data_new_restriction(iodef_event_data_t *ptr, iodef_event_data_restriction_t **ret);

typedef enum {
        IODEF_INCIDENT_LANG_ERROR = -1,
} iodef_incident_lang_t;


iodef_incident_lang_t iodef_incident_lang_to_numeric(const char *name);
const char *iodef_incident_lang_to_string(iodef_incident_lang_t val);


typedef enum {
        IODEF_INCIDENT_RESTRICTION_ERROR = -1,
        IODEF_INCIDENT_RESTRICTION_PUBLIC = 1,
        IODEF_INCIDENT_RESTRICTION_NEED_TO_KNOW = 2,
        IODEF_INCIDENT_RESTRICTION_PRIVATE = 3,
        IODEF_INCIDENT_RESTRICTION_DEFAULT = 4,
} iodef_incident_restriction_t;


iodef_incident_restriction_t iodef_incident_restriction_to_numeric(const char *name);
const char *iodef_incident_restriction_to_string(iodef_incident_restriction_t val);


typedef enum {
        IODEF_INCIDENT_PURPOSE_ERROR = -1,
        IODEF_INCIDENT_PURPOSE_TRACEBACK = 1,
        IODEF_INCIDENT_PURPOSE_MITIGATION = 2,
        IODEF_INCIDENT_PURPOSE_REPORTING = 3,
        IODEF_INCIDENT_PURPOSE_OTHER = 4,
        IODEF_INCIDENT_PURPOSE_EXT_VALUE = 5,
} iodef_incident_purpose_t;


iodef_incident_purpose_t iodef_incident_purpose_to_numeric(const char *name);
const char *iodef_incident_purpose_to_string(iodef_incident_purpose_t val);




/*
 * struct {
 *         IODEF_LINKED_OBJECT;
 *         REFCOUNT;
 * 
 *         iodef_time_t *detect_time;
 *         LISTED_OBJECT(additional_data_list, iodef_additional_data_t);
 *         iodef_time_t *end_time;
 *         LISTED_OBJECT(description_list, libiodef_string_t);
 *         LISTED_OBJECT(contact_list, iodef_contact_t);
 *         iodef_alternative_id_t *alternative_id;
 *         REQUIRED(iodef_time_t, *report_time);
 *         iodef_time_t *start_time;
 *         LISTED_OBJECT(event_data_list, iodef_event_data_t);
 *         iodef_related_activity_t *related_activity;
 *         REQUIRED(iodef_incident_id_t, *incident_id);
 *         LISTED_OBJECT(assessment_list, iodef_assessment_t);
 *         LISTED_OBJECT(method_list, iodef_method_t);
 *         iodef_history_t *history;
 *         iodef_incident_lang_t lang;
 *         iodef_incident_restriction_t restriction;
 *         libiodef_string_t *ext_purpose;
 *         iodef_incident_purpose_t purpose;
 * } TYPE_ID(iodef_incident_t, 34);
 */


typedef struct iodef_incident iodef_incident_t;

int iodef_incident_new(iodef_incident_t **ret);
int iodef_incident_copy(const iodef_incident_t *src, iodef_incident_t *dst);
int iodef_incident_clone(iodef_incident_t *src, iodef_incident_t **dst);
int iodef_incident_compare(const iodef_incident_t *obj1, const iodef_incident_t *obj2);
iodef_incident_t *iodef_incident_ref(iodef_incident_t *incident);

#ifndef SWIG
int _iodef_incident_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_incident_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_incident_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_incident_destroy(iodef_incident_t *ptr);
iodef_time_t *iodef_incident_get_detect_time(iodef_incident_t *ptr);
void iodef_incident_set_detect_time(iodef_incident_t *ptr, iodef_time_t *detect_time);
int iodef_incident_new_detect_time(iodef_incident_t *ptr, iodef_time_t **ret);

iodef_additional_data_t *iodef_incident_get_next_additional_data(iodef_incident_t *incident, iodef_additional_data_t *additional_data_cur);
void iodef_incident_set_additional_data(iodef_incident_t *ptr, iodef_additional_data_t *object, int pos);
int iodef_incident_new_additional_data(iodef_incident_t *ptr, iodef_additional_data_t **ret, int pos);

iodef_time_t *iodef_incident_get_end_time(iodef_incident_t *ptr);
void iodef_incident_set_end_time(iodef_incident_t *ptr, iodef_time_t *end_time);
int iodef_incident_new_end_time(iodef_incident_t *ptr, iodef_time_t **ret);

libiodef_string_t *iodef_incident_get_next_description(iodef_incident_t *incident, libiodef_string_t *libiodef_string_cur);
void iodef_incident_set_description(iodef_incident_t *ptr, libiodef_string_t *object, int pos);
int iodef_incident_new_description(iodef_incident_t *ptr, libiodef_string_t **ret, int pos);

iodef_contact_t *iodef_incident_get_next_contact(iodef_incident_t *incident, iodef_contact_t *contact_cur);
void iodef_incident_set_contact(iodef_incident_t *ptr, iodef_contact_t *object, int pos);
int iodef_incident_new_contact(iodef_incident_t *ptr, iodef_contact_t **ret, int pos);

iodef_alternative_id_t *iodef_incident_get_alternative_id(iodef_incident_t *ptr);
void iodef_incident_set_alternative_id(iodef_incident_t *ptr, iodef_alternative_id_t *alternative_id);
int iodef_incident_new_alternative_id(iodef_incident_t *ptr, iodef_alternative_id_t **ret);

iodef_time_t *iodef_incident_get_report_time(iodef_incident_t *ptr);
void iodef_incident_set_report_time(iodef_incident_t *ptr, iodef_time_t *report_time);
int iodef_incident_new_report_time(iodef_incident_t *ptr, iodef_time_t **ret);

iodef_time_t *iodef_incident_get_start_time(iodef_incident_t *ptr);
void iodef_incident_set_start_time(iodef_incident_t *ptr, iodef_time_t *start_time);
int iodef_incident_new_start_time(iodef_incident_t *ptr, iodef_time_t **ret);

iodef_event_data_t *iodef_incident_get_next_event_data(iodef_incident_t *incident, iodef_event_data_t *event_data_cur);
void iodef_incident_set_event_data(iodef_incident_t *ptr, iodef_event_data_t *object, int pos);
int iodef_incident_new_event_data(iodef_incident_t *ptr, iodef_event_data_t **ret, int pos);

iodef_related_activity_t *iodef_incident_get_related_activity(iodef_incident_t *ptr);
void iodef_incident_set_related_activity(iodef_incident_t *ptr, iodef_related_activity_t *related_activity);
int iodef_incident_new_related_activity(iodef_incident_t *ptr, iodef_related_activity_t **ret);

iodef_incident_id_t *iodef_incident_get_incident_id(iodef_incident_t *ptr);
void iodef_incident_set_incident_id(iodef_incident_t *ptr, iodef_incident_id_t *incident_id);
int iodef_incident_new_incident_id(iodef_incident_t *ptr, iodef_incident_id_t **ret);

iodef_assessment_t *iodef_incident_get_next_assessment(iodef_incident_t *incident, iodef_assessment_t *assessment_cur);
void iodef_incident_set_assessment(iodef_incident_t *ptr, iodef_assessment_t *object, int pos);
int iodef_incident_new_assessment(iodef_incident_t *ptr, iodef_assessment_t **ret, int pos);

iodef_method_t *iodef_incident_get_next_method(iodef_incident_t *incident, iodef_method_t *method_cur);
void iodef_incident_set_method(iodef_incident_t *ptr, iodef_method_t *object, int pos);
int iodef_incident_new_method(iodef_incident_t *ptr, iodef_method_t **ret, int pos);

iodef_history_t *iodef_incident_get_history(iodef_incident_t *ptr);
void iodef_incident_set_history(iodef_incident_t *ptr, iodef_history_t *history);
int iodef_incident_new_history(iodef_incident_t *ptr, iodef_history_t **ret);

iodef_incident_lang_t iodef_incident_get_lang(iodef_incident_t *ptr);
void iodef_incident_set_lang(iodef_incident_t *ptr, iodef_incident_lang_t lang);
int iodef_incident_new_lang(iodef_incident_t *ptr, iodef_incident_lang_t **ret);

iodef_incident_restriction_t iodef_incident_get_restriction(iodef_incident_t *ptr);
void iodef_incident_set_restriction(iodef_incident_t *ptr, iodef_incident_restriction_t restriction);
int iodef_incident_new_restriction(iodef_incident_t *ptr, iodef_incident_restriction_t **ret);

libiodef_string_t *iodef_incident_get_ext_purpose(iodef_incident_t *ptr);
void iodef_incident_set_ext_purpose(iodef_incident_t *ptr, libiodef_string_t *ext_purpose);
int iodef_incident_new_ext_purpose(iodef_incident_t *ptr, libiodef_string_t **ret);

iodef_incident_purpose_t iodef_incident_get_purpose(iodef_incident_t *ptr);
void iodef_incident_set_purpose(iodef_incident_t *ptr, iodef_incident_purpose_t purpose);
int iodef_incident_new_purpose(iodef_incident_t *ptr, iodef_incident_purpose_t **ret);

typedef enum {
        IODEF_DOCUMENT_LANG_ERROR = -1,
} iodef_document_lang_t;


iodef_document_lang_t iodef_document_lang_to_numeric(const char *name);
const char *iodef_document_lang_to_string(iodef_document_lang_t val);




/*
 * struct {
 *         IODEF_OBJECT;
 *         REFCOUNT;
 * 
 *         LISTED_OBJECT(incident_list, iodef_incident_t);
 *         iodef_document_lang_t lang;
 *         libiodef_string_t *formatid;
 *         REQUIRED(libiodef_string_t, *version);
 * } TYPE_ID(iodef_document_t, 35);
 */


typedef struct iodef_document iodef_document_t;

int iodef_document_new(iodef_document_t **ret);
int iodef_document_copy(const iodef_document_t *src, iodef_document_t *dst);
int iodef_document_clone(iodef_document_t *src, iodef_document_t **dst);
int iodef_document_compare(const iodef_document_t *obj1, const iodef_document_t *obj2);
iodef_document_t *iodef_document_ref(iodef_document_t *document);

#ifndef SWIG
int _iodef_document_get_child(void *p, iodef_class_child_id_t child, void **childptr);
int _iodef_document_new_child(void *p, iodef_class_child_id_t child, int n, void **ret);
int _iodef_document_destroy_child(void *p, iodef_class_child_id_t child, int n);
#endif

void iodef_document_destroy(iodef_document_t *ptr);
iodef_incident_t *iodef_document_get_next_incident(iodef_document_t *document, iodef_incident_t *incident_cur);
void iodef_document_set_incident(iodef_document_t *ptr, iodef_incident_t *object, int pos);
int iodef_document_new_incident(iodef_document_t *ptr, iodef_incident_t **ret, int pos);

iodef_document_lang_t iodef_document_get_lang(iodef_document_t *ptr);
void iodef_document_set_lang(iodef_document_t *ptr, iodef_document_lang_t lang);
int iodef_document_new_lang(iodef_document_t *ptr, iodef_document_lang_t **ret);

libiodef_string_t *iodef_document_get_formatid(iodef_document_t *ptr);
void iodef_document_set_formatid(iodef_document_t *ptr, libiodef_string_t *formatid);
int iodef_document_new_formatid(iodef_document_t *ptr, libiodef_string_t **ret);

libiodef_string_t *iodef_document_get_version(iodef_document_t *ptr);
void iodef_document_set_version(iodef_document_t *ptr, libiodef_string_t *version);
int iodef_document_new_version(iodef_document_t *ptr, libiodef_string_t **ret);


int _iodef_additional_data_type_is_set(iodef_additional_data_t *ad);

#ifdef __cplusplus
  }
#endif
#define IODEF_CLASS_ID_ADDITIONAL_DATA_RESTRICTION 151
#define IODEF_CLASS_ID_ADDITIONAL_DATA_TYPE 152
#define IODEF_CLASS_ID_ADDITIONAL_DATA 1
#define IODEF_CLASS_ID_EMAIL_MEANING 153
#define IODEF_CLASS_ID_EMAIL 2
#define IODEF_CLASS_ID_REGISTRY_HANDLE_REGISTRY 154
#define IODEF_CLASS_ID_REGISTRY_HANDLE 3
#define IODEF_CLASS_ID_POSTAL_ADDRESS_LANG 155
#define IODEF_CLASS_ID_POSTAL_ADDRESS_MEANING 156
#define IODEF_CLASS_ID_POSTAL_ADDRESS 4
#define IODEF_CLASS_ID_CONTACT_TYPE 157
#define IODEF_CLASS_ID_CONTACT_ROLE 158
#define IODEF_CLASS_ID_CONTACT_RESTRICTION 159
#define IODEF_CLASS_ID_CONTACT 5
#define IODEF_CLASS_ID_INCIDENT_ID_RESTRICTION 160
#define IODEF_CLASS_ID_INCIDENT_ID 6
#define IODEF_CLASS_ID_ALTERNATIVE_ID_RESTRICTION 161
#define IODEF_CLASS_ID_ALTERNATIVE_ID 7
#define IODEF_CLASS_ID_RELATED_ACTIVITY_RESTRICTION 162
#define IODEF_CLASS_ID_RELATED_ACTIVITY 8
#define IODEF_CLASS_ID_HISTORY_ITEM_ACTION 163
#define IODEF_CLASS_ID_HISTORY_ITEM_RESTRICTION 164
#define IODEF_CLASS_ID_HISTORY_ITEM 9
#define IODEF_CLASS_ID_HISTORY_RESTRICTION 165
#define IODEF_CLASS_ID_HISTORY 10
#define IODEF_CLASS_ID_EXPECTATION_ACTION 166
#define IODEF_CLASS_ID_EXPECTATION_RESTRICTION 167
#define IODEF_CLASS_ID_EXPECTATION_SEVERITY 168
#define IODEF_CLASS_ID_EXPECTATION 11
#define IODEF_CLASS_ID_RECORD_PATTERN_OFFSETUNIT 169
#define IODEF_CLASS_ID_RECORD_PATTERN_TYPE 170
#define IODEF_CLASS_ID_RECORD_PATTERN 12
#define IODEF_CLASS_ID_RECORD_ITEM_RESTRICTION 171
#define IODEF_CLASS_ID_RECORD_ITEM_DTYPE 172
#define IODEF_CLASS_ID_RECORD_ITEM 13
#define IODEF_CLASS_ID_APPLICATION 14
#define IODEF_CLASS_ID_RECORD_DATA_RESTRICTION 173
#define IODEF_CLASS_ID_RECORD_DATA 15
#define IODEF_CLASS_ID_RECORD_RESTRICTION 174
#define IODEF_CLASS_ID_RECORD 16
#define IODEF_CLASS_ID_REFERENCE 17
#define IODEF_CLASS_ID_METHOD_RESTRICTION 175
#define IODEF_CLASS_ID_METHOD 18
#define IODEF_CLASS_ID_TIME_IMPACT_DURATION 176
#define IODEF_CLASS_ID_TIME_IMPACT_METRIC 177
#define IODEF_CLASS_ID_TIME_IMPACT_SEVERITY 178
#define IODEF_CLASS_ID_TIME_IMPACT 19
#define IODEF_CLASS_ID_IMPACT_LANG 179
#define IODEF_CLASS_ID_IMPACT_COMPLETION 180
#define IODEF_CLASS_ID_IMPACT_TYPE 181
#define IODEF_CLASS_ID_IMPACT_SEVERITY 182
#define IODEF_CLASS_ID_IMPACT 20
#define IODEF_CLASS_ID_CONFIDENCE_RATING 183
#define IODEF_CLASS_ID_CONFIDENCE 21
#define IODEF_CLASS_ID_MONETARY_IMPACT_SEVERITY 184
#define IODEF_CLASS_ID_MONETARY_IMPACT 22
#define IODEF_CLASS_ID_COUNTER_DURATION 185
#define IODEF_CLASS_ID_COUNTER_TYPE 186
#define IODEF_CLASS_ID_COUNTER 23
#define IODEF_CLASS_ID_ASSESSMENT_RESTRICTION 187
#define IODEF_CLASS_ID_ASSESSMENT_OCCURRENCE 188
#define IODEF_CLASS_ID_ASSESSMENT 24
#define IODEF_CLASS_ID_SERVICE 25
#define IODEF_CLASS_ID_ADDRESS_CATEGORY 189
#define IODEF_CLASS_ID_ADDRESS 27
#define IODEF_CLASS_ID_NODE_ROLE_CATEGORY 190
#define IODEF_CLASS_ID_NODE_ROLE_LANG 191
#define IODEF_CLASS_ID_NODE_ROLE 28
#define IODEF_CLASS_ID_NODE 29
#define IODEF_CLASS_ID_OPERATING_SYSTEM 30
#define IODEF_CLASS_ID_SYSTEM_CATEGORY 192
#define IODEF_CLASS_ID_SYSTEM_RESTRICTION 193
#define IODEF_CLASS_ID_SYSTEM_SPOOFED 194
#define IODEF_CLASS_ID_SYSTEM 31
#define IODEF_CLASS_ID_FLOW 32
#define IODEF_CLASS_ID_EVENT_DATA_RESTRICTION 195
#define IODEF_CLASS_ID_EVENT_DATA 33
#define IODEF_CLASS_ID_INCIDENT_LANG 196
#define IODEF_CLASS_ID_INCIDENT_RESTRICTION 197
#define IODEF_CLASS_ID_INCIDENT_PURPOSE 198
#define IODEF_CLASS_ID_INCIDENT 34
#define IODEF_CLASS_ID_DOCUMENT_LANG 199
#define IODEF_CLASS_ID_DOCUMENT 35

#endif /* _LIBIODEF_IODEF_TREE_WRAP */
